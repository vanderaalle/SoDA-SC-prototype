<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<title></title>
<meta name="Generator" content="Cocoa HTML Writer">
<meta name="CocoaVersion" content="1038.35">
<style type="text/css">
p.p1 {margin: 0.0px 0.0px 0.0px 0.0px; font: 18.0px Helvetica}
p.p2 {margin: 0.0px 0.0px 0.0px 0.0px; font: 12.0px Helvetica; min-height: 14.0px}
p.p3 {margin: 0.0px 0.0px 0.0px 0.0px; font: 12.0px Helvetica}
p.p4 {margin: 0.0px 0.0px 0.0px 0.0px; font: 9.0px Monaco; min-height: 12.0px}
p.p5 {margin: 0.0px 0.0px 0.0px 0.0px; font: 9.0px Monaco; color: #002ba6}
p.p6 {margin: 0.0px 0.0px 0.0px 0.0px; font: 9.0px Monaco}
p.p7 {margin: 0.0px 0.0px 0.0px 0.0px; font: 9.0px Monaco; color: #802625}
p.p8 {margin: 0.0px 0.0px 0.0px 0.0px; font: 9.0px Monaco; color: #516b2b}
p.p9 {margin: 0.0px 0.0px 0.0px 0.0px; font: 9.0px Monaco; color: #bf0000}
p.p10 {margin: 0.0px 0.0px 0.0px 0.0px; font: 9.0px Monaco; color: #0000bf}
span.s1 {font: 12.0px Helvetica}
span.s2 {color: #000000}
span.s3 {color: #002ba6}
span.s4 {color: #516b2b}
span.s5 {color: #007300}
span.s6 {color: #022ba6}
span.Apple-tab-span {white-space:pre}
</style>
</head>
<body>
<p class="p1"><b>CtkProtoNotes / CtkNoteObject<span class="Apple-tab-span">	</span></b><span class="s1"><b><span class="Apple-tab-span">	</span>a note prototyping system</b></span></p>
<p class="p1"><b>CtkSynthDef</b></p>
<p class="p2"><br></p>
<p class="p3"><b>Part of the CompositionToolKit (Ctk) system. See Ctk help for more details</b></p>
<p class="p2"><br></p>
<p class="p3"><b>CtkProtoNotes - A dictionary of CtkNoteObjetcs created from SynthDefs</b></p>
<p class="p2"><br></p>
<p class="p3"><b>Class Methods</b></p>
<p class="p2"><b><span class="Apple-converted-space"> </span></b></p>
<p class="p3"><b><span class="Apple-converted-space"> </span>*new(SynthDefs) </b>- an instance or many instances of SynthDef. These SynthDefs will be loaded to the default</p>
<p class="p3"><span class="Apple-converted-space"> <span class="Apple-tab-span">	</span></span>server for use in NRT and RT use.<span class="Apple-converted-space">  </span>Instances of CtkNoteObject are created from the SynthDefs to be<span class="Apple-converted-space"> </span></p>
<p class="p3"><span class="Apple-converted-space"> <span class="Apple-tab-span">	</span></span>used<span class="Apple-converted-space">  </span>for creating instances of CtkNotes. SynthDefs can also be a SynthDescLib.</p>
<p class="p2"><b><span class="Apple-converted-space"> <span class="Apple-tab-span">	</span></span></b></p>
<p class="p3"><b><span class="Apple-converted-space"> </span>add(SynthDefs) </b>- add additional SynthDefs to an instance of CtkProtoNotes.</p>
<p class="p2"><b><span class="Apple-converted-space"> </span></b></p>
<p class="p3"><b><span class="Apple-converted-space"> </span>at(id)</b> - access an instance of CtkNoteObject stored within an instance of CtkProtoNotes. 'id' is the name of a<span class="Apple-converted-space"> </span></p>
<p class="p3"><span class="Apple-converted-space"> <span class="Apple-tab-span">	</span></span>SynthDef loaded into an instance of CtkProtoNotes</p>
<p class="p2"><br></p>
<p class="p3"><b>Examples:</b></p>
<p class="p4"><br></p>
<p class="p5"><span class="s2">a = </span>CtkProtoNotes<span class="s2">(</span></p>
<p class="p6"><span class="Apple-tab-span">	</span><span class="s3">SynthDef</span>(<span class="s4">\test</span>, {<span class="s3">arg</span> gate = 1, freq, amp;</p>
<p class="p6"><span class="Apple-tab-span">	</span><span class="Apple-tab-span">	</span><span class="s3">var</span> env, envgen, src;</p>
<p class="p6"><span class="Apple-tab-span">	</span><span class="Apple-tab-span">	</span>env = <span class="s3">Control</span>.names([<span class="s4">\env</span>]).kr(<span class="s3">Env</span>.newClear(8));</p>
<p class="p6"><span class="Apple-tab-span">	</span><span class="Apple-tab-span">	</span>envgen = <span class="s3">EnvGen</span>.kr(env, gate, doneAction: 2);</p>
<p class="p6"><span class="Apple-tab-span">	</span><span class="Apple-tab-span">	</span>src = <span class="s3">SinOsc</span>.ar(freq, 0, amp * envgen);</p>
<p class="p6"><span class="Apple-tab-span">	</span><span class="Apple-tab-span">	</span><span class="s3">Out</span>.ar(0, <span class="s3">Pan2</span>.ar(src, <span class="s3">Rand</span>(-1.0, 1.0)));</p>
<p class="p6"><span class="Apple-tab-span">	</span><span class="Apple-tab-span">	</span>}),</p>
<p class="p6"><span class="Apple-tab-span">	</span><span class="s3">SynthDef</span>(<span class="s4">\control</span>, {<span class="s3">arg</span> outbus, rate, low, hi;</p>
<p class="p6"><span class="Apple-tab-span">	</span><span class="Apple-tab-span">	</span><span class="s3">Out</span>.kr(outbus, <span class="s3">LFNoise2</span>.kr(rate).range(low, hi))</p>
<p class="p6"><span class="Apple-tab-span">	</span><span class="Apple-tab-span">	</span>})</p>
<p class="p6"><span class="Apple-tab-span">	</span>);</p>
<p class="p4"><span class="Apple-tab-span">	</span></p>
<p class="p6">a.add(</p>
<p class="p6"><span class="Apple-tab-span">	</span><span class="s3">SynthDef</span>(<span class="s4">\test2</span>, {<span class="s3">arg</span> gate = 1, freq, amp;</p>
<p class="p6"><span class="Apple-tab-span">	</span><span class="Apple-tab-span">	</span><span class="s3">var</span> env, envgen, src;</p>
<p class="p6"><span class="Apple-tab-span">	</span><span class="Apple-tab-span">	</span>env = <span class="s3">Control</span>.names([<span class="s4">\env</span>]).kr(<span class="s3">Env</span>.newClear(8));</p>
<p class="p6"><span class="Apple-tab-span">	</span><span class="Apple-tab-span">	</span>envgen = <span class="s3">EnvGen</span>.kr(env, gate, doneAction: 2);</p>
<p class="p6"><span class="Apple-tab-span">	</span><span class="Apple-tab-span">	</span>src = <span class="s3">BPF</span>.ar(<span class="s3">WhiteNoise</span>.ar(amp), freq, 0.01, amp * envgen);</p>
<p class="p6"><span class="Apple-tab-span">	</span><span class="Apple-tab-span">	</span><span class="s3">Out</span>.ar(0, <span class="s3">Pan2</span>.ar(src, <span class="s3">Rand</span>(-1.0, 1.0)));</p>
<p class="p6"><span class="Apple-tab-span">	</span><span class="Apple-tab-span">	</span>})</p>
<p class="p6"><span class="Apple-tab-span">	</span>);</p>
<p class="p4"><br></p>
<p class="p7">// access the CtkNoteObject prototype</p>
<p class="p4"><br></p>
<p class="p8"><span class="s2">a[</span>\test<span class="s2">];</span></p>
<p class="p6">a[<span class="s4">\test</span>].args;</p>
<p class="p4"><br></p>
<p class="p8"><span class="s2">a[</span>\control<span class="s2">];</span></p>
<p class="p6">a[<span class="s4">\control</span>].args;</p>
<p class="p4"><br></p>
<p class="p8"><span class="s2">a[</span>\test2<span class="s2">];</span></p>
<p class="p6">a[<span class="s4">\test2</span>].args;</p>
<p class="p4"><br></p>
<p class="p9">// or, create a CtkProtoNotes from a SynthDescLib</p>
<p class="p10"><span class="s2">a = </span>CtkProtoNotes<span class="s2">(</span>SynthDescLib<span class="s2">.global);</span></p>
<p class="p9"><span class="s2">a[</span><span class="s5">\default</span><span class="s2">]; </span>// returns the CtkNoteObject from the SynthDef \default</p>
<p class="p6">a[<span class="s5">\default</span>].args;</p>
<p class="p2"><br></p>
<p class="p3"><b>CtkNoteObject - A prototyping system based on SynthDefs.<span class="Apple-converted-space"> </span></b></p>
<p class="p2"><br></p>
<p class="p3"><b>In general, you will not need to create instances of CtkNoteObj. CtkProtoNotes will do it for you. The main purpose of this class is the creation of new instances of CtkNote based on a CtkNoteObject prototype.</b></p>
<p class="p2"><br></p>
<p class="p3"><b>Class Methods</b></p>
<p class="p2"><b><span class="Apple-converted-space"> </span></b></p>
<p class="p3"><b><span class="Apple-converted-space"> </span>*new(SynthDef) </b>- an instance of SynthDef.</p>
<p class="p2"><b><span class="Apple-converted-space"> </span></b></p>
<p class="p3"><b>new(starttime, duration, addAction, target, server) - deprecated - use 'note'</b></p>
<p class="p2"><b><span class="Apple-tab-span">	</span></b></p>
<p class="p3"><b>note(starttime, duration, addAction, target, server) </b>- create a new instance of CtkNote based on the</p>
<p class="p3"><span class="Apple-tab-span">	</span>SynthDef contained in this instances of CtkNoteObject. See the CtkNote helpfile for a description of</p>
<p class="p3"><span class="Apple-tab-span">	</span>parameter uses for both real-time and non-real-time uses.</p>
<p class="p2"><b><span class="Apple-converted-space"> </span></b></p>
<p class="p3"><b>args(post) </b>- if 'post' is true, post a list of controls and defaults to the post window.<span class="Apple-converted-space"> </span></p>
<p class="p3"><span class="Apple-tab-span">	</span>The Dictionary containing the argument names as keys and default values is returned.</p>
<p class="p2"><br></p>
<p class="p3"><b>Examples:</b></p>
<p class="p4"><br></p>
<p class="p5"><span class="s2">a = </span>CtkNoteObject<span class="s2">.new(</span></p>
<p class="p6"><span class="Apple-tab-span">	</span><span class="s3">SynthDef</span>(<span class="s4">\test2</span>, {<span class="s3">arg</span> gate = 1, freq, amp;</p>
<p class="p6"><span class="Apple-tab-span">	</span><span class="Apple-tab-span">	</span><span class="s3">var</span> env, envgen, src;</p>
<p class="p6"><span class="Apple-tab-span">	</span><span class="Apple-tab-span">	</span>env = <span class="s3">Control</span>.names([<span class="s4">\env</span>]).kr(<span class="s3">Env</span>.newClear(8));</p>
<p class="p6"><span class="Apple-tab-span">	</span><span class="Apple-tab-span">	</span>envgen = <span class="s3">EnvGen</span>.kr(env, gate, doneAction: 2);</p>
<p class="p6"><span class="Apple-tab-span">	</span><span class="Apple-tab-span">	</span>src = <span class="s3">BPF</span>.ar(<span class="s3">WhiteNoise</span>.ar(amp), freq, 0.01, amp * envgen);</p>
<p class="p6"><span class="Apple-tab-span">	</span><span class="Apple-tab-span">	</span><span class="s3">Out</span>.ar(0, <span class="s3">Pan2</span>.ar(src, <span class="s3">Rand</span>(-1.0, 1.0)));</p>
<p class="p6"><span class="Apple-tab-span">	</span><span class="Apple-tab-span">	</span>})</p>
<p class="p6"><span class="Apple-tab-span">	</span>);</p>
<p class="p4"><br></p>
<p class="p7">// show the args</p>
<p class="p6">a.args;</p>
<p class="p4"><br></p>
<p class="p7">// create a new instance of CtkNote based on this prototype</p>
<p class="p6">b = a.new;</p>
<p class="p4"><br></p>
<p class="p7">// set values for its arguments. See the CtkNote helpfile for more info on arguments</p>
<p class="p6">b.freq_(440).amp_(1.0).env_(<span class="s3">Env</span>([0, 1, 0], [0.5, 0.5], <span class="s4">\sin</span>, 1));</p>
<p class="p4"><br></p>
<p class="p7">// play it</p>
<p class="p6">b.play;</p>
<p class="p4"><br></p>
<p class="p7">// create a second instance with different args ...</p>
<p class="p6">c = a.new.freq_(660).amp_(1.0).env_(<span class="s3">Env</span>([0, 1, 0], [5, 5], <span class="s4">\sin</span>, 1)).play;</p>
<p class="p4"><br></p>
<p class="p7">// release both</p>
<p class="p6">b.release; c.release;</p>
<p class="p4"><br></p>
<p class="p3"><b>Examples that create new instances of a SynthDef directly from CtkProtoNotes:</b></p>
<p class="p4"><br></p>
<p class="p6">s = <span class="s3">Server</span>.internal.boot;</p>
<p class="p6"><span class="s3">Server</span>.default = s;</p>
<p class="p4"><br></p>
<p class="p5"><span class="s2">a = </span>CtkProtoNotes<span class="s2">(</span></p>
<p class="p6"><span class="Apple-tab-span">	</span><span class="s3">SynthDef</span>(<span class="s4">\test</span>, {<span class="s3">arg</span> gate = 1, freq, amp;</p>
<p class="p6"><span class="Apple-tab-span">	</span><span class="Apple-tab-span">	</span><span class="s3">var</span> env, envgen, src;</p>
<p class="p6"><span class="Apple-tab-span">	</span><span class="Apple-tab-span">	</span>env = <span class="s3">Control</span>.names([<span class="s4">\env</span>]).kr(<span class="s3">Env</span>.newClear(8));</p>
<p class="p6"><span class="Apple-tab-span">	</span><span class="Apple-tab-span">	</span>envgen = <span class="s3">EnvGen</span>.kr(env, gate, doneAction: 2);</p>
<p class="p6"><span class="Apple-tab-span">	</span><span class="Apple-tab-span">	</span>src = <span class="s3">SinOsc</span>.ar(freq, 0, amp * envgen);</p>
<p class="p6"><span class="Apple-tab-span">	</span><span class="Apple-tab-span">	</span><span class="s3">Out</span>.ar(0, <span class="s3">Pan2</span>.ar(src, <span class="s3">Rand</span>(-1.0, 1.0)));</p>
<p class="p6"><span class="Apple-tab-span">	</span><span class="Apple-tab-span">	</span>}),</p>
<p class="p6"><span class="Apple-tab-span">	</span><span class="s3">SynthDef</span>(<span class="s4">\control</span>, {<span class="s3">arg</span> outbus, rate, low, hi;</p>
<p class="p6"><span class="Apple-tab-span">	</span><span class="Apple-tab-span">	</span><span class="s3">Out</span>.kr(outbus, <span class="s3">LFNoise2</span>.kr(rate).range(low, hi))</p>
<p class="p6"><span class="Apple-tab-span">	</span><span class="Apple-tab-span">	</span>}),</p>
<p class="p6"><span class="Apple-tab-span">	</span><span class="s3">SynthDef</span>(<span class="s4">\test2</span>, {<span class="s3">arg</span> gate = 1, freq, amp;</p>
<p class="p6"><span class="Apple-tab-span">	</span><span class="Apple-tab-span">	</span><span class="s3">var</span> env, envgen, src;</p>
<p class="p6"><span class="Apple-tab-span">	</span><span class="Apple-tab-span">	</span>env = <span class="s3">Control</span>.names([<span class="s4">\env</span>]).kr(<span class="s3">Env</span>.newClear(8));</p>
<p class="p6"><span class="Apple-tab-span">	</span><span class="Apple-tab-span">	</span>envgen = <span class="s3">EnvGen</span>.kr(env, gate, doneAction: 2);</p>
<p class="p6"><span class="Apple-tab-span">	</span><span class="Apple-tab-span">	</span>src = <span class="s3">BPF</span>.ar(<span class="s3">WhiteNoise</span>.ar(amp), freq, 0.01, amp * envgen);</p>
<p class="p6"><span class="Apple-tab-span">	</span><span class="Apple-tab-span">	</span><span class="s3">Out</span>.ar(0, <span class="s3">Pan2</span>.ar(src, <span class="s3">Rand</span>(-1.0, 1.0)));</p>
<p class="p6"><span class="Apple-tab-span">	</span><span class="Apple-tab-span">	</span>})</p>
<p class="p6"><span class="Apple-tab-span">	</span>);</p>
<p class="p4"><span class="Apple-tab-span">	</span></p>
<p class="p6">b = a[<span class="s4">\test2</span>].new.freq_(440).amp_(1.0).env_(<span class="s3">Env</span>([0, 1, 0], [0.5, 0.5], <span class="s4">\sin</span>, 1)).play;</p>
<p class="p6">c = a[<span class="s4">\test</span>].new.freq_(440).amp_(0.1).env_(<span class="s3">Env</span>([0, 1, 0], [0.5, 0.5], <span class="s4">\sin</span>, 1)).play;</p>
<p class="p4"><br></p>
<p class="p6">c.release;</p>
<p class="p6">b.release;</p>
<p class="p4"><br></p>
<p class="p3"><b>CtkSynthDef - A prototyping system based on SynthDefs - wraps a SynthDef inside a CtkNoteObject</b></p>
<p class="p2"><b></b><br></p>
<p class="p6">a = <span class="s6">CtkSynthDef</span>(<span class="s4">\test2</span>, {<span class="s6">arg</span> gate = 1, freq, amp;</p>
<p class="p6"><span class="Apple-tab-span">	</span><span class="Apple-tab-span">	</span><span class="s6">var</span> env, envgen, src;</p>
<p class="p6"><span class="Apple-tab-span">	</span><span class="Apple-tab-span">	</span>env = <span class="s6">Control</span>.names([<span class="s4">\env</span>]).kr(<span class="s6">Env</span>.newClear(8));</p>
<p class="p6"><span class="Apple-tab-span">	</span><span class="Apple-tab-span">	</span>envgen = <span class="s6">EnvGen</span>.kr(env, gate, doneAction: 2);</p>
<p class="p6"><span class="Apple-tab-span">	</span><span class="Apple-tab-span">	</span>src = <span class="s6">BPF</span>.ar(<span class="s6">WhiteNoise</span>.ar(amp), freq, 0.01, amp * envgen);</p>
<p class="p6"><span class="Apple-tab-span">	</span><span class="Apple-tab-span">	</span><span class="s6">Out</span>.ar(0, <span class="s6">Pan2</span>.ar(src, <span class="s6">Rand</span>(-1.0, 1.0)));</p>
<p class="p6"><span class="Apple-tab-span">	</span><span class="Apple-tab-span">	</span>})</p>
<p class="p2"><b></b><br></p>
</body>
</html>
