<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<title></title>
<meta name="Generator" content="Cocoa HTML Writer">
<meta name="CocoaVersion" content="949.27">
<style type="text/css">
p.p1 {margin: 0.0px 0.0px 0.0px 0.0px; font: 18.0px Helvetica}
p.p2 {margin: 0.0px 0.0px 0.0px 0.0px; font: 12.0px Helvetica; min-height: 14.0px}
p.p3 {margin: 0.0px 0.0px 0.0px 0.0px; font: 12.0px Helvetica}
</style>
</head>
<body>
<p class="p1"><b>Ctk - The Composition Tool Kit</b></p>
<p class="p2"><br></p>
<p class="p3"><b>A set of Object classes to aid specifically in the creation of fixed pieces through the use of a Score-like structure. To make general usage easier, the Ctk Objects also support real-time control through the .play method. The Objects included in the Ctk are:</b></p>
<p class="p2"><br></p>
<p class="p3"><b>CtkScore</b></p>
<p class="p3"><b>CtkProtoNotes</b></p>
<p class="p3"><b>CtkNoteObject</b></p>
<p class="p3"><b>CtkNote</b></p>
<p class="p3"><b>CtkEvent</b></p>
<p class="p3"><b>CtkBuffer</b></p>
<p class="p3"><b>CtkControl</b></p>
<p class="p3"><b>CtkAudio</b></p>
<p class="p2"><br></p>
<p class="p3">The Ctk Objects can be used as a replacement for the Object oriented Classes in the standard SuperCollider distribution (Synth, Buffer, Group,<span class="Apple-converted-space">  </span>and Bus). The main difference is that these classes can easily be used to populate a CtkScore for NRT synthesis.<span class="Apple-converted-space"> </span></p>
<p class="p2"><br></p>
<p class="p3"><b>Disadvantages to the standard Object classes:</b></p>
<p class="p2"><br></p>
<p class="p3">- Since the classes can operate in both modes, CtkNotes (the Ctk equivalent of Synth) needs to be explicitly told to 'play'. Synthesis does not begin automatically.<span class="Apple-converted-space"> </span></p>
<p class="p3">- CtkNotes are prototyped according to an actual SynthDef, as a result some of the objects syntax is a little different. Arguments are passed to the CtkNote instance in a different way than Synth and may take some getting used to (though the syntax is more in line with the getter and setter methods of other SC objects... more below).</p>
<p class="p3">- To make these Objects as flexible as possible with other Ctk objects, the classes check for quite a bit internally. This of course adds some overhead to the language side of SuperCollider, though I haven't noticed any performance problems in the test code I have run.</p>
<p class="p3">- Probably other things. Let me know if there are other difficulties you find so I can warn others.</p>
<p class="p2"><br></p>
<p class="p3"><b>Advantages to the standard Object classes:</b></p>
<p class="p2"><br></p>
<p class="p3">- Very easy to use in both real-time and non-real-time mode.</p>
<p class="p3">- arguments to instances of CtkNote are set through more traditional getter and setter methods. When a CtkNoteObject is created, methods are added to its instance that correspond with the Control parameters of a SynthDef (including array parameters).</p>
<p class="p3">- In real-time mode, the change of an argument's value will be reflected in the running synth.</p>
<p class="p3">- Better support for playing CtkScore in real-time. Instances of CtkBuffer will be allocated before the score is played, allowing for loading of large buffers before notes are played. CtkBuffers also de-allocate themselves after the CtkScore finishes playing.<span class="Apple-converted-space"> </span></p>
<p class="p3">- Probably other things. Let me know what you like so I can add them to the list.</p>
<p class="p2"><br></p>
<p class="p2"><br></p>
<p class="p2"><br></p>
</body>
</html>
