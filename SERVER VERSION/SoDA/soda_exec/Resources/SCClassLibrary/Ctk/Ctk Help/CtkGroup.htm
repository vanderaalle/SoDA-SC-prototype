<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<title></title>
<meta name="Generator" content="Cocoa HTML Writer">
<meta name="CocoaVersion" content="824.42">
<style type="text/css">
p.p1 {margin: 0.0px 0.0px 0.0px 0.0px; font: 12.0px Helvetica; color: #000000}
p.p2 {margin: 0.0px 0.0px 0.0px 0.0px; font: 12.0px Helvetica; color: #000000; min-height: 14.0px}
p.p3 {margin: 0.0px 0.0px 0.0px 0.0px; font: 9.0px Monaco; color: #000000; min-height: 12.0px}
p.p4 {margin: 0.0px 0.0px 0.0px 0.0px; font: 9.0px Monaco; color: #007300; min-height: 12.0px}
p.p5 {margin: 0.0px 0.0px 0.0px 0.0px; font: 9.0px Monaco; color: #000000}
p.p6 {margin: 0.0px 0.0px 0.0px 0.0px; font: 9.0px Monaco; color: #007300}
p.p7 {margin: 0.0px 0.0px 0.0px 0.0px; font: 9.0px Monaco; color: #0000bf}
p.p8 {margin: 0.0px 0.0px 0.0px 0.0px; font: 9.0px Monaco; color: #bf0000}
p.p9 {margin: 0.0px 0.0px 0.0px 0.0px; font: 12.0px Helvetica; color: #007300; min-height: 14.0px}
p.p10 {margin: 0.0px 0.0px 0.0px 0.0px; font: 9.0px Monaco; color: #606060}
span.s1 {font: 18.0px Helvetica}
span.s2 {text-decoration: underline}
span.s3 {color: #0000bf}
span.s4 {color: #000000}
span.s5 {color: #007300}
span.s6 {color: #bf0000}
span.s7 {color: #606060}
span.Apple-tab-span {white-space:pre}
</style>
</head>
<body>
<p class="p1"><span class="s1"><b>CtkGroup<span class="Apple-tab-span">	</span></b></span><b><span class="Apple-tab-span">	</span><span class="Apple-tab-span">	</span><span class="Apple-tab-span">	</span>a note prototyping system</b></p>
<p class="p2"><br></p>
<p class="p1"><b>Part of the CompositionToolKit (Ctk) system. See Ctk help for more details</b></p>
<p class="p2"><br></p>
<p class="p1"><b>Class Methods</b></p>
<p class="p2"><b><span class="Apple-converted-space">  </span></b></p>
<p class="p1"><b>*new(starttime, duration, node, addAction, target, server)</b></p>
<p class="p1"><b><span class="Apple-converted-space"> <span class="Apple-tab-span">	</span></span>starttime - </b>in NRT or CtkScore rendering mode, the starttime of an CtkGroup event. In real-time mode,</p>
<p class="p1"><span class="Apple-converted-space"> <span class="Apple-tab-span">	</span><span class="Apple-tab-span">	</span></span>this parameter is ignored (defaults to nil).</p>
<p class="p1"><b><span class="Apple-converted-space"> <span class="Apple-tab-span">	</span></span>duration - </b>a duration for the CtkGroup. If not nil, the group<span class="Apple-converted-space"> </span></p>
<p class="p1"><b><span class="Apple-converted-space"> <span class="Apple-tab-span">	</span></span>node - </b>an id for this instance of CtkGroup. Defaults to nil, and one will be allocated for you.</p>
<p class="p1"><b><span class="Apple-converted-space"> <span class="Apple-tab-span">	</span></span>addAction </b>- a symbol (\head, \tail, \before, \after or \replace) or an addAction id<span class="Apple-converted-space"> </span></p>
<p class="p1"><span class="Apple-converted-space"> <span class="Apple-tab-span">	</span><span class="Apple-tab-span">	</span></span>(see <a href="../../../../../../../../../Applications/SuperCollider_f/Help/ServerArchitecture/Server-Command-Reference.html"><span class="s2">Server-Command-Reference</span></a><span class="s2">)</span> for and the /g_new section for a more in-depth description)</p>
<p class="p1"><b><span class="Apple-converted-space"> <span class="Apple-tab-span">	</span></span>target </b>- a node ID (synth or group) or an instance of CtkGroup or CtkNote</p>
<p class="p1"><b><span class="Apple-converted-space"> <span class="Apple-tab-span">	</span></span>server </b>- the server to execute the node on. Defaults to Server.default for real-time performance</p>
<p class="p1"><b>*play </b>- create and immediately place a group on the server</p>
<p class="p2"><br></p>
<p class="p1"><b>play(latency) </b>- create an instance of CtkGroup on the server. Schedule with a given latency (defaults to nil).<span class="Apple-converted-space"> </span></p>
<p class="p1"><span class="Apple-tab-span">	</span>Needed for real-time usage.</p>
<p class="p1"><b>release(time, key) </b>- Sets the CtkGroup member's 'key' argument to 0. 'key' defaults to \gate for use in sustained<span class="Apple-converted-space"> </span></p>
<p class="p1"><span class="Apple-tab-span">	</span>envelopes. In real-time mode,'time' schedules the release in the future (in seconds). In non-real-time<span class="Apple-converted-space"> </span></p>
<p class="p1"><span class="Apple-tab-span">	</span>mode, a message to release an instance of CtkGroup is created at CtkGroup starttime + time. Can be</p>
<p class="p1"><span class="Apple-tab-span">	</span>used to set the 'key' argument of every member of a CtkGroup to a value (typically 'gate' args)</p>
<p class="p1"><b>free(time, addMsg) </b>- frees an instance of CtkGroup and everything running in that CtkGroup. In real-time mode,</p>
<p class="p1"><span class="Apple-tab-span">	</span>'time' schedules the freeing of a node in the future. in non-real-time mode, a message to free the node is<span class="Apple-converted-space"> </span></p>
<p class="p1"><span class="Apple-tab-span">	</span>created at starttime + time.</p>
<p class="p1"><b>addTo(CtkScore)</b> - add an instance of CtkGroup to an instance of CtkScore</p>
<p class="p3"><br></p>
<p class="p1"><b>Examples that create new instances of a SynthDef directly from CtkProtoNotes:</b></p>
<p class="p4"><br></p>
<p class="p5">s = <span class="s3">Server</span>.internal.boot;</p>
<p class="p5"><span class="s3">Server</span>.default = s;</p>
<p class="p3"><br></p>
<p class="p4"><br></p>
<p class="p6">(</p>
<p class="p5"><span class="s3">var</span> pnotes, group, bus1, bus2, env, freq, control, task;</p>
<p class="p5"><span class="s3">var</span> cond;</p>
<p class="p5">cond = <span class="s3">Condition</span>.new;</p>
<p class="p7">Routine<span class="s4">.run({</span></p>
<p class="p7"><span class="s4"><span class="Apple-tab-span">	</span>pnotes = </span>CtkProtoNotes<span class="s4">(</span></p>
<p class="p5"><span class="Apple-tab-span">	</span><span class="Apple-tab-span">	</span><span class="s3">SynthDef</span>(<span class="s5">\test</span>, {<span class="s3">arg</span> dur, freq, amp;</p>
<p class="p5"><span class="Apple-tab-span">	</span><span class="Apple-tab-span">	</span><span class="Apple-tab-span">	</span><span class="s3">var</span> env, envgen, src;</p>
<p class="p5"><span class="Apple-tab-span">	</span><span class="Apple-tab-span">	</span><span class="Apple-tab-span">	</span>env = <span class="s3">Control</span>.names([<span class="s5">\env</span>]).kr(<span class="s3">Env</span>.newClear(8));</p>
<p class="p5"><span class="Apple-tab-span">	</span><span class="Apple-tab-span">	</span><span class="Apple-tab-span">	</span>envgen = <span class="s3">EnvGen</span>.kr(env, timeScale: dur, doneAction: 2);</p>
<p class="p5"><span class="Apple-tab-span">	</span><span class="Apple-tab-span">	</span><span class="Apple-tab-span">	</span>src = <span class="s3">SinOsc</span>.ar(freq, 0, amp * envgen);</p>
<p class="p5"><span class="Apple-tab-span">	</span><span class="Apple-tab-span">	</span><span class="Apple-tab-span">	</span><span class="s3">Out</span>.ar(0, <span class="s3">Pan2</span>.ar(src, <span class="s3">Rand</span>(-1.0, 1.0)));</p>
<p class="p5"><span class="Apple-tab-span">	</span><span class="Apple-tab-span">	</span><span class="Apple-tab-span">	</span>}),</p>
<p class="p5"><span class="Apple-tab-span">	</span><span class="Apple-tab-span">	</span><span class="s3">SynthDef</span>(<span class="s5">\control</span>, {<span class="s3">arg</span> outbus, rate, low, hi;</p>
<p class="p5"><span class="Apple-tab-span">	</span><span class="Apple-tab-span">	</span><span class="Apple-tab-span">	</span><span class="s3">Out</span>.kr(outbus, <span class="s3">LFNoise2</span>.kr(rate).range(low, hi))</p>
<p class="p5"><span class="Apple-tab-span">	</span><span class="Apple-tab-span">	</span><span class="Apple-tab-span">	</span>}),</p>
<p class="p5"><span class="Apple-tab-span">	</span><span class="Apple-tab-span">	</span><span class="s3">SynthDef</span>(<span class="s5">\controlenv</span>, {<span class="s3">arg</span> gate = 1, outbus;</p>
<p class="p5"><span class="Apple-tab-span">	</span><span class="Apple-tab-span">	</span><span class="Apple-tab-span">	</span><span class="s3">var</span> env;</p>
<p class="p5"><span class="Apple-tab-span">	</span><span class="Apple-tab-span">	</span><span class="Apple-tab-span">	</span>env = <span class="s3">Control</span>.names([<span class="s5">\env</span>]).kr(<span class="s3">Env</span>.newClear(8));</p>
<p class="p5"><span class="Apple-tab-span">	</span><span class="Apple-tab-span">	</span><span class="Apple-tab-span">	</span><span class="s3">Out</span>.kr(outbus, <span class="s3">EnvGen</span>.kr(env, gate));</p>
<p class="p5"><span class="Apple-tab-span">	</span><span class="Apple-tab-span">	</span><span class="Apple-tab-span">	</span>}).load(s)</p>
<p class="p5"><span class="Apple-tab-span">	</span><span class="Apple-tab-span">	</span>);</p>
<p class="p3"><span class="Apple-tab-span">	</span></p>
<p class="p5"><span class="Apple-tab-span">	</span>s.sync(cond);</p>
<p class="p3"><span class="Apple-tab-span">	</span></p>
<p class="p5"><span class="Apple-tab-span">	</span>group = <span class="s3">CtkGroup</span>.play;</p>
<p class="p5"><span class="Apple-tab-span">	</span>bus1 = <span class="s3">CtkControl</span>.play;</p>
<p class="p5"><span class="Apple-tab-span">	</span>bus2 = <span class="s3">CtkControl</span>.play;</p>
<p class="p5"><span class="Apple-tab-span">	</span>env = <span class="s3">Env</span>([0, 1, 0], [1, 4], [3, -4], 1);</p>
<p class="p3"><span class="Apple-tab-span">	</span></p>
<p class="p8"><span class="s4"><span class="Apple-tab-span">	</span></span>// create a controlenv and a loop of CtkNotes to play inside the CtkGroup</p>
<p class="p5"><span class="Apple-tab-span">	</span>freq = pnotes[<span class="s5">\control</span>].new(addAction: <span class="s5">\head</span>, target: group)</p>
<p class="p8"><span class="s4"><span class="Apple-tab-span">	</span><span class="Apple-tab-span">	</span>.outbus_(bus1.bus) </span>// need to use the .bus method on CtkControl to just pass in its bus id<span class="Apple-converted-space"> </span></p>
<p class="p5"><span class="Apple-tab-span">	</span><span class="Apple-tab-span">	</span>.rate_(1)</p>
<p class="p5"><span class="Apple-tab-span">	</span><span class="Apple-tab-span">	</span>.low_(1000)</p>
<p class="p5"><span class="Apple-tab-span">	</span><span class="Apple-tab-span">	</span>.hi_(1050)</p>
<p class="p5"><span class="Apple-tab-span">	</span><span class="Apple-tab-span">	</span>.play;</p>
<p class="p3"><br></p>
<p class="p5"><span class="Apple-tab-span">	</span>control = pnotes[<span class="s5">\controlenv</span>].new(addAction: <span class="s5">\head</span>, target: group)</p>
<p class="p8"><span class="s4"><span class="Apple-tab-span">	</span><span class="Apple-tab-span">	</span>.outbus_(bus2.bus) </span>// need to use the .bus method on CtkControl to just pass in its bus id</p>
<p class="p5"><span class="Apple-tab-span">	</span><span class="Apple-tab-span">	</span>.env_(env)</p>
<p class="p5"><span class="Apple-tab-span">	</span><span class="Apple-tab-span">	</span>.play;</p>
<p class="p3"><span class="Apple-tab-span">	</span><span class="Apple-tab-span">	</span><span class="Apple-tab-span">	</span></p>
<p class="p5"><span class="Apple-tab-span">	</span>task = <span class="s3">Task</span>({</p>
<p class="p5"><span class="Apple-tab-span">	</span><span class="Apple-tab-span">	</span><span class="s3">var</span> reltime, dur;</p>
<p class="p5"><span class="Apple-tab-span">	</span><span class="Apple-tab-span">	</span>reltime = env.releaseTime;</p>
<p class="p5"><span class="Apple-tab-span">	</span><span class="Apple-tab-span">	</span>dur = 10;</p>
<p class="p8"><span class="s4"><span class="Apple-tab-span">	</span><span class="Apple-tab-span">	</span></span>// schedule the release of the global envelope</p>
<p class="p5"><span class="Apple-tab-span">	</span><span class="Apple-tab-span">	</span><span class="s3">SystemClock</span>.sched(dur - reltime, {</p>
<p class="p5"><span class="Apple-tab-span">	</span><span class="Apple-tab-span">	</span><span class="Apple-tab-span">	</span>group.release;</p>
<p class="p5"><span class="Apple-tab-span">	</span><span class="Apple-tab-span">	</span><span class="Apple-tab-span">	</span>});</p>
<p class="p8"><span class="s4"><span class="Apple-tab-span">	</span><span class="Apple-tab-span">	</span></span>// schedule the release of the Task</p>
<p class="p5"><span class="Apple-tab-span">	</span><span class="Apple-tab-span">	</span><span class="s3">SystemClock</span>.sched(dur, {</p>
<p class="p5"><span class="Apple-tab-span">	</span><span class="Apple-tab-span">	</span><span class="Apple-tab-span">	</span>group.freeAll;</p>
<p class="p5"><span class="Apple-tab-span">	</span><span class="Apple-tab-span">	</span><span class="Apple-tab-span">	</span>task.stop;</p>
<p class="p5"><span class="Apple-tab-span">	</span><span class="Apple-tab-span">	</span><span class="Apple-tab-span">	</span>});</p>
<p class="p5"><span class="Apple-tab-span">	</span><span class="Apple-tab-span">	</span>loop({</p>
<p class="p5"><span class="Apple-tab-span">	</span><span class="Apple-tab-span">	</span><span class="Apple-tab-span">	</span>pnotes[<span class="s5">\test</span>].new(addAction: <span class="s5">\tail</span>, target: group)</p>
<p class="p5"><span class="Apple-tab-span">	</span><span class="Apple-tab-span">	</span><span class="Apple-tab-span">	</span><span class="Apple-tab-span">	</span>.dur_(1)</p>
<p class="p5"><span class="Apple-tab-span">	</span><span class="Apple-tab-span">	</span><span class="Apple-tab-span">	</span><span class="Apple-tab-span">	</span>.env_(<span class="s3">Env</span>([0, 1, 0], [0.5, 0.5], <span class="s5">\sin</span>))</p>
<p class="p8"><span class="s4"><span class="Apple-tab-span">	</span><span class="Apple-tab-span">	</span><span class="Apple-tab-span">	</span><span class="Apple-tab-span">	</span>.freq_(bus1) </span>// if a CtkControl is passed in, the arg will be mapped to the<span class="Apple-converted-space"> </span></p>
<p class="p8"><span class="s4"><span class="Apple-tab-span">	</span><span class="Apple-tab-span">	</span><span class="Apple-tab-span">	</span><span class="Apple-tab-span">	</span>.amp_(bus2) </span>// CtkControls bus</p>
<p class="p5"><span class="Apple-tab-span">	</span><span class="Apple-tab-span">	</span><span class="Apple-tab-span">	</span><span class="Apple-tab-span">	</span>.play;</p>
<p class="p5"><span class="Apple-tab-span">	</span><span class="Apple-tab-span">	</span><span class="Apple-tab-span">	</span>0.5.wait;</p>
<p class="p5"><span class="Apple-tab-span">	</span><span class="Apple-tab-span">	</span><span class="Apple-tab-span">	</span>})</p>
<p class="p5"><span class="Apple-tab-span">	</span><span class="Apple-tab-span">	</span>});</p>
<p class="p3"><span class="Apple-tab-span">	</span></p>
<p class="p5"><span class="Apple-tab-span">	</span>task.play;</p>
<p class="p5"><span class="Apple-tab-span">	</span>})</p>
<p class="p6">)</p>
<p class="p4"><span class="Apple-tab-span">	</span></p>
<p class="p1"><b>Examples that populate an instance of CtkScore. The CtkScore can then be rendered in NRT, played or saved as a file. See CtkScore for more examples.</b></p>
<p class="p9"><br></p>
<p class="p5">(</p>
<p class="p5"><span class="s3">var</span> scpn, score, grainfun, gliss;</p>
<p class="p7"><span class="s4">scpn = </span>CtkProtoNotes<span class="s4">(</span></p>
<p class="p5"><span class="Apple-tab-span">	</span><span class="s3">SynthDef</span>(<span class="s5">\control</span>, {<span class="s3">arg</span> outbus, rate, low, hi;</p>
<p class="p5"><span class="Apple-tab-span">	</span><span class="Apple-tab-span">	</span><span class="s3">Out</span>.kr(outbus, <span class="s3">LFNoise2</span>.kr(rate).range(low, hi))</p>
<p class="p5"><span class="Apple-tab-span">	</span><span class="Apple-tab-span">	</span>}),</p>
<p class="p5"><span class="Apple-tab-span">	</span><span class="s3">SynthDef</span>(<span class="s5">\test</span>, {<span class="s3">arg</span> freq, amp, dur;</p>
<p class="p5"><span class="Apple-tab-span">	</span><span class="Apple-tab-span">	</span><span class="s3">var</span> env, envgen, src;</p>
<p class="p5"><span class="Apple-tab-span">	</span><span class="Apple-tab-span">	</span>env = <span class="s3">Env</span>([0, 1, 0], [0.5, 0.5], <span class="s5">\sin</span>);</p>
<p class="p5"><span class="Apple-tab-span">	</span><span class="Apple-tab-span">	</span>envgen = <span class="s3">EnvGen</span>.kr(env, timeScale: dur);</p>
<p class="p5"><span class="Apple-tab-span">	</span><span class="Apple-tab-span">	</span>src = <span class="s3">BPF</span>.ar(<span class="s3">WhiteNoise</span>.ar(amp), freq, 0.01, amp * envgen);</p>
<p class="p5"><span class="Apple-tab-span">	</span><span class="Apple-tab-span">	</span><span class="s3">Out</span>.ar(0, <span class="s3">Pan2</span>.ar(src, <span class="s3">Rand</span>(-1.0, 1.0)));</p>
<p class="p5"><span class="Apple-tab-span">	</span><span class="Apple-tab-span">	</span>})</p>
<p class="p5"><span class="Apple-tab-span">	</span>);</p>
<p class="p3"><span class="Apple-tab-span">	</span></p>
<p class="p5">score = <span class="s3">CtkScore</span>.new;</p>
<p class="p3"><br></p>
<p class="p8">/*</p>
<p class="p8">creates a granular gesture of duration. Each grain is 0.1 seconds long, new grain every 0.02 seconds</p>
<p class="p8">*/</p>
<p class="p3"><br></p>
<p class="p5">grainfun = {<span class="s3">arg</span> starttime, duration, ampenv, lowfreq, hifreq;</p>
<p class="p5"><span class="Apple-tab-span">	</span><span class="s3">var</span> now, note;</p>
<p class="p5"><span class="Apple-tab-span">	</span>now = 0;</p>
<p class="p5"><span class="Apple-tab-span">	</span>ampenv.times = ampenv.times.normalizeSum * duration; <span class="s6">// scale the Env's time to the gestures</span></p>
<p class="p5"><span class="Apple-tab-span">	</span>while({</p>
<p class="p8"><span class="s4"><span class="Apple-tab-span">	</span><span class="Apple-tab-span">	</span></span>// create a note... add it to the CtkScore</p>
<p class="p5"><span class="Apple-tab-span">	</span><span class="Apple-tab-span">	</span>note = scpn[<span class="s5">\test</span>].new(starttime + now, 0.1)</p>
<p class="p5"><span class="Apple-tab-span">	</span><span class="Apple-tab-span">	</span><span class="Apple-tab-span">	</span>.freq_(lowfreq.rrand(hifreq))</p>
<p class="p5"><span class="Apple-tab-span">	</span><span class="Apple-tab-span">	</span><span class="Apple-tab-span">	</span>.amp_(ampenv[now])</p>
<p class="p5"><span class="Apple-tab-span">	</span><span class="Apple-tab-span">	</span><span class="Apple-tab-span">	</span>.dur_(0.1);</p>
<p class="p8"><span class="s4"><span class="Apple-tab-span">	</span><span class="Apple-tab-span">	</span>score.add(note); </span>// tell CtkScore to add the note</p>
<p class="p5"><span class="Apple-tab-span">	</span><span class="Apple-tab-span">	</span>now = now + 0.02;</p>
<p class="p5"><span class="Apple-tab-span">	</span><span class="Apple-tab-span">	</span>now &lt; duration;</p>
<p class="p5"><span class="Apple-tab-span">	</span><span class="Apple-tab-span">	</span>});</p>
<p class="p5"><span class="Apple-tab-span">	</span>};</p>
<p class="p3"><span class="Apple-tab-span">	</span></p>
<p class="p5">gliss = {<span class="s3">arg</span> starttime, duration, rate, lowfreq, hifreq;</p>
<p class="p5"><span class="Apple-tab-span">	</span><span class="s3">var</span> cbus, control, note, group;</p>
<p class="p5"><span class="Apple-tab-span">	</span>cbus = <span class="s3">CtkControl</span>.new;</p>
<p class="p8"><span class="s4"><span class="Apple-tab-span">	</span></span>// run these processes within its own CtkGroup</p>
<p class="p5"><span class="Apple-tab-span">	</span>group = <span class="s3">CtkGroup</span>.new(duration: 15, addAction: <span class="s5">\head</span>, target: 1).addTo(score);</p>
<p class="p5"><span class="Apple-tab-span">	</span>control = scpn[<span class="s5">\control</span>].new(starttime, duration, <span class="s5">\head</span>, group)</p>
<p class="p5"><span class="Apple-tab-span">	</span><span class="Apple-tab-span">	</span>.outbus_(cbus.bus)</p>
<p class="p5"><span class="Apple-tab-span">	</span><span class="Apple-tab-span">	</span>.rate_(rate)</p>
<p class="p5"><span class="Apple-tab-span">	</span><span class="Apple-tab-span">	</span>.low_(lowfreq)</p>
<p class="p5"><span class="Apple-tab-span">	</span><span class="Apple-tab-span">	</span>.hi_(hifreq)</p>
<p class="p8"><span class="s4"><span class="Apple-tab-span">	</span><span class="Apple-tab-span">	</span>.addTo(score); </span>// tell CtkNote to add to a CtkScore</p>
<p class="p5"><span class="Apple-tab-span">	</span>note = scpn[<span class="s5">\test</span>].new(starttime, duration, <span class="s5">\tail</span>, group)</p>
<p class="p5"><span class="Apple-tab-span">	</span><span class="Apple-tab-span">	</span>.freq_(cbus)</p>
<p class="p5"><span class="Apple-tab-span">	</span><span class="Apple-tab-span">	</span>.amp_(2)</p>
<p class="p5"><span class="Apple-tab-span">	</span><span class="Apple-tab-span">	</span>.dur_(duration)</p>
<p class="p5"><span class="Apple-tab-span">	</span><span class="Apple-tab-span">	</span>.addTo(score);</p>
<p class="p5"><span class="Apple-tab-span">	</span>};</p>
<p class="p3"><br></p>
<p class="p5">grainfun.value(1, 10, <span class="s3">Env</span>([0, 1, 0], [0.5, 0.5], [3, -5]), 440, 880);</p>
<p class="p5">grainfun.value(4, 4, <span class="s3">Env</span>([0, 1, 0], [0.5, 0.5], [3, -5]), 4400, 8800);</p>
<p class="p5">grainfun.value(6, 12, <span class="s3">Env</span>([0, 1, 0], [0.5, 0.5], [3, -5]), 300, 400);</p>
<p class="p5">grainfun.value(3, 10, <span class="s3">Env</span>([0, 1, 0], [0.5, 0.5], [3, -5]), 200, 200);</p>
<p class="p5">grainfun.value(1.5, 20, <span class="s3">Env</span>([0, 1, 0], [0.5, 0.5], [3, -5]), 7000, 7100);</p>
<p class="p3"><br></p>
<p class="p5">5.do({<span class="s3">arg</span> i;</p>
<p class="p5"><span class="Apple-tab-span">	</span><span class="s3">var</span> j;</p>
<p class="p5"><span class="Apple-tab-span">	</span>j = i + 1;</p>
<p class="p5"><span class="Apple-tab-span">	</span>gliss.value(3 + (i + 4), 10.rrand(7), j.reciprocal, 440 * j, 880 * j);</p>
<p class="p5"><span class="Apple-tab-span">	</span>});</p>
<p class="p3"><span class="Apple-tab-span">	</span></p>
<p class="p8">// uncomment to play the CtkScore you have created</p>
<p class="p8">//score.play(s);</p>
<p class="p3"><br></p>
<p class="p8">// uncomment to write the score to a soundfile</p>
<p class="p5">score.write(<span class="s7">"~/Desktop/test.aiff"</span>.standardizePath, 22,<span class="Apple-converted-space"> </span></p>
<p class="p5"><span class="Apple-tab-span">	</span>options: <span class="s3">ServerOptions</span>.new.numOutputBusChannels_(2));</p>
<p class="p3"><br></p>
<p class="p8">// uncomment to save the CtkScore as a file</p>
<p class="p5">score.saveToFile(<span class="s7">"~/Desktop/test.sc"</span>.standardizePath);</p>
<p class="p5">)</p>
<p class="p3"><br></p>
<p class="p3"><br></p>
<p class="p10"><span class="s4">a=</span><span class="s3">Player</span><span class="s4">.new(</span>"~/Desktop/test.aiff"<span class="s4">).gui</span></p>
<p class="p3"><br></p>
</body>
</html>
