<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<title></title>
<meta name="Generator" content="Cocoa HTML Writer">
<meta name="CocoaVersion" content="949.33">
<style type="text/css">
p.p1 {margin: 0.0px 0.0px 0.0px 0.0px; font: 12.0px Helvetica}
p.p2 {margin: 0.0px 0.0px 0.0px 0.0px; font: 12.0px Helvetica; min-height: 14.0px}
p.p3 {margin: 0.0px 0.0px 0.0px 0.0px; font: 9.0px Monaco; min-height: 12.0px}
p.p4 {margin: 0.0px 0.0px 0.0px 0.0px; font: 9.0px Monaco; color: #0829a2}
p.p5 {margin: 0.0px 0.0px 0.0px 0.0px; font: 9.0px Monaco}
p.p6 {margin: 0.0px 0.0px 0.0px 0.0px; font: 9.0px Monaco; color: #632727}
p.p7 {margin: 0.0px 0.0px 0.0px 0.0px; font: 9.0px Monaco; color: #632727; min-height: 12.0px}
span.s1 {font: 18.0px Helvetica}
span.s2 {text-decoration: underline ; color: #0c37da}
span.s3 {text-decoration: underline}
span.s4 {color: #000000}
span.s5 {color: #0829a2}
span.s6 {color: #4f5c18}
span.s7 {color: #632727}
span.s8 {color: #4d4d4d}
span.Apple-tab-span {white-space:pre}
</style>
</head>
<body>
<p class="p1"><span class="s1"><b>CtkNote<span class="Apple-tab-span">	</span></b></span><b><span class="Apple-tab-span">	</span><span class="Apple-tab-span">	</span><span class="Apple-tab-span">	</span>a note prototyping system</b></p>
<p class="p2"><br></p>
<p class="p1"><b>Part of the CompositionToolKit (Ctk) system. See Ctk help for more details</b></p>
<p class="p2"><br></p>
<p class="p1"><b>CtkNotes are most easily created through the use of CtkProtoNotes and CtkNoteObjects. Rarely will you create them directly (since it would be difficult to to enable all of the functionality available). Examples below show the intended use.</b></p>
<p class="p2"><br></p>
<p class="p1"><b>Class Methods</b></p>
<p class="p2"><b><span class="Apple-converted-space"> </span></b></p>
<p class="p1"><b><span class="Apple-converted-space"> </span>*new instances are best created through instances of CtkNoteObject or CtkProtoNotes (see below)</b></p>
<p class="p2"><b><span class="Apple-converted-space"> </span></b></p>
<p class="p1"><b><span class="Apple-converted-space"> </span>USING THE NEW INSTANCE METHOD OF A PRE-EXISTING CTKNOTEOBJECT</b></p>
<p class="p2"><b><span class="Apple-converted-space"> </span></b></p>
<p class="p1"><b><span class="Apple-converted-space"> </span>CtkNoteObject.new(starttime, duration, addAction, target, server)</b></p>
<p class="p1"><b><span class="Apple-converted-space"> <span class="Apple-tab-span">	</span></span>starttime - </b>in NRT or CtkScore rendering mode, the starttime of an CtkNote event. In real-time mode,</p>
<p class="p1"><span class="Apple-converted-space"> <span class="Apple-tab-span">	</span><span class="Apple-tab-span">	</span></span>this parameter will schedule the event for starttime seconds in the future.</p>
<p class="p1"><b><span class="Apple-converted-space"> <span class="Apple-tab-span">	</span></span>duration - </b>if not nil, schedules the release of an CtkNote (works in both real-time and non-real-time)</p>
<p class="p1"><b><span class="Apple-converted-space"> <span class="Apple-tab-span">	</span></span>addAction </b>- a symbol (\head, \tail, \before, \after or \replace) or an addAction id<span class="Apple-converted-space"> </span></p>
<p class="p1"><span class="Apple-converted-space"> <span class="Apple-tab-span">	</span><span class="Apple-tab-span">	</span></span>(see <a href="../../../../../../../../Applications/SuperCollider_f/Help/ServerArchitecture/Server-Command-Reference.html"><span class="s2">Server-Command-Reference</span></a><span class="s3">)</span> for and the /s_new section for a more in-depth description)</p>
<p class="p1"><b><span class="Apple-converted-space"> <span class="Apple-tab-span">	</span></span>target </b>- a node ID (synth or group) or an instance of CtkGroup or CtkNote</p>
<p class="p1"><b><span class="Apple-converted-space"> <span class="Apple-tab-span">	</span></span>server </b>- the server to execute the node on. Defaults to Server.default for real-time performance</p>
<p class="p2"><b><span class="Apple-converted-space"> <span class="Apple-tab-span">	</span></span></b></p>
<p class="p2"><br></p>
<p class="p1"><b>play(latency) </b>- play an instance of CtkNote. Schedule with a given latency (defaults to nil)</p>
<p class="p1"><b>release(time, key) </b>- Sets the CtkNotes 'key' argument to 0. 'key' default to \gate for use in sustained<span class="Apple-converted-space"> </span></p>
<p class="p1"><span class="Apple-tab-span">	</span>envelopes. In real-time mode,'time' schedules the release in the future (in seconds). In non-real-time<span class="Apple-converted-space"> </span></p>
<p class="p1"><span class="Apple-tab-span">	</span>mode, a message to release an instance of CtkNote is created at CtkNotes starttime + time.</p>
<p class="p1"><b>free(time, addMsg) </b>- frees an instance of CtkNote. In real-time mode, 'time' schedules the freeing of a node</p>
<p class="p1"><span class="Apple-tab-span">	</span>in the future. in non-real-time mode, a message to free the node is created at starttime + time.</p>
<p class="p1"><b>addTo(CtkScore)</b> - add an instance of CtkNote to an instance of CtkScore</p>
<p class="p2"><br></p>
<p class="p1"><b>In addition, getter and setter arguments are created for each instance of CtkNote based on a SynthDefs</b></p>
<p class="p1"><b>arguments.</b></p>
<p class="p2"><br></p>
<p class="p1"><b>Examples:</b></p>
<p class="p3"><br></p>
<p class="p4"><span class="s4">a = </span>CtkNoteObject<span class="s4">.new(</span></p>
<p class="p5"><span class="Apple-tab-span">	</span><span class="s5">SynthDef</span>(<span class="s6">\test</span>, {<span class="s5">arg</span> gate = 1, freq, amp;</p>
<p class="p5"><span class="Apple-tab-span">	</span><span class="Apple-tab-span">	</span><span class="s5">var</span> env, envgen, src;</p>
<p class="p5"><span class="Apple-tab-span">	</span><span class="Apple-tab-span">	</span>env = <span class="s5">Control</span>.names([<span class="s6">\env</span>]).kr(<span class="s5">Env</span>.newClear(8));</p>
<p class="p5"><span class="Apple-tab-span">	</span><span class="Apple-tab-span">	</span>envgen = <span class="s5">EnvGen</span>.kr(env, gate, doneAction: 2);</p>
<p class="p5"><span class="Apple-tab-span">	</span><span class="Apple-tab-span">	</span>src = <span class="s5">BPF</span>.ar(<span class="s5">WhiteNoise</span>.ar(amp), freq, 0.01, amp * envgen);</p>
<p class="p5"><span class="Apple-tab-span">	</span><span class="Apple-tab-span">	</span><span class="s5">Out</span>.ar(0, <span class="s5">Pan2</span>.ar(src, <span class="s5">Rand</span>(-1.0, 1.0)));</p>
<p class="p5"><span class="Apple-tab-span">	</span><span class="Apple-tab-span">	</span>})</p>
<p class="p5"><span class="Apple-tab-span">	</span>);</p>
<p class="p3"><br></p>
<p class="p6">/* REAL TIME USES */</p>
<p class="p6">// show the args</p>
<p class="p5">a.args;</p>
<p class="p3"><br></p>
<p class="p6">// create a new instance of CtkNote based on this prototype</p>
<p class="p5">b = a.new(1.0);<span class="Apple-converted-space"> </span></p>
<p class="p3"><br></p>
<p class="p6">// set values for its arguments. See the CtkNote helpfile for more info on arguments</p>
<p class="p5">b.freq_(800).amp_(1.0).env_(<span class="s5">Env</span>([0, 1, 0], [0.5, 0.5], <span class="s6">\sin</span>, 1));</p>
<p class="p3"><br></p>
<p class="p6">// play it</p>
<p class="p5">b.play;</p>
<p class="p5">b.freq_(3200)</p>
<p class="p5">b.amp_(2)</p>
<p class="p7"><br></p>
<p class="p6">// create a second instance with different args ...</p>
<p class="p5">c = a.new.freq_(660).amp_(1.0).env_(<span class="s5">Env</span>([0, 1, 0], [5, 5], <span class="s6">\sin</span>, 1)).play;</p>
<p class="p3"><br></p>
<p class="p6">// release both</p>
<p class="p5">b.release;<span class="Apple-converted-space"> </span></p>
<p class="p5">c.release;</p>
<p class="p3"><br></p>
<p class="p1"><b>Examples that create new instances of a SynthDef directly from CtkProtoNotes:</b></p>
<p class="p3"><br></p>
<p class="p5">s = <span class="s5">Server</span>.internal.boot;</p>
<p class="p5"><span class="s5">Server</span>.default = s;</p>
<p class="p3"><br></p>
<p class="p5">(</p>
<p class="p4"><span class="s4">a = </span>CtkProtoNotes<span class="s4">(</span></p>
<p class="p5"><span class="Apple-tab-span">	</span><span class="s5">SynthDef</span>(<span class="s6">\test</span>, {<span class="s5">arg</span> gate = 1, freq, amp;</p>
<p class="p5"><span class="Apple-tab-span">	</span><span class="Apple-tab-span">	</span><span class="s5">var</span> env, envgen, src;</p>
<p class="p5"><span class="Apple-tab-span">	</span><span class="Apple-tab-span">	</span>env = <span class="s5">Control</span>.names([<span class="s6">\env</span>]).kr(<span class="s5">Env</span>.newClear(8));</p>
<p class="p5"><span class="Apple-tab-span">	</span><span class="Apple-tab-span">	</span>envgen = <span class="s5">EnvGen</span>.kr(env, gate, doneAction: 2);</p>
<p class="p5"><span class="Apple-tab-span">	</span><span class="Apple-tab-span">	</span>src = <span class="s5">SinOsc</span>.ar(freq, 0, amp * envgen);</p>
<p class="p5"><span class="Apple-tab-span">	</span><span class="Apple-tab-span">	</span><span class="s5">Out</span>.ar(0, <span class="s5">Pan2</span>.ar(src, <span class="s5">Rand</span>(-1.0, 1.0)));</p>
<p class="p5"><span class="Apple-tab-span">	</span><span class="Apple-tab-span">	</span>}),</p>
<p class="p5"><span class="Apple-tab-span">	</span><span class="s5">SynthDef</span>(<span class="s6">\control</span>, {<span class="s5">arg</span> outbus, rate, low, hi;</p>
<p class="p5"><span class="Apple-tab-span">	</span><span class="Apple-tab-span">	</span><span class="s5">Out</span>.kr(outbus, <span class="s5">LFNoise2</span>.kr(rate).range(low, hi).poll)</p>
<p class="p5"><span class="Apple-tab-span">	</span><span class="Apple-tab-span">	</span>}),</p>
<p class="p5"><span class="Apple-tab-span">	</span><span class="s5">SynthDef</span>(<span class="s6">\test2</span>, {<span class="s5">arg</span> gate = 1, freq, amp;</p>
<p class="p5"><span class="Apple-tab-span">	</span><span class="Apple-tab-span">	</span><span class="s5">var</span> env, envgen, src;</p>
<p class="p5"><span class="Apple-tab-span">	</span><span class="Apple-tab-span">	</span>env = <span class="s5">Control</span>.names([<span class="s6">\env</span>]).kr(<span class="s5">Env</span>.newClear(8));</p>
<p class="p5"><span class="Apple-tab-span">	</span><span class="Apple-tab-span">	</span>envgen = <span class="s5">EnvGen</span>.kr(env, gate, doneAction: 2);</p>
<p class="p5"><span class="Apple-tab-span">	</span><span class="Apple-tab-span">	</span>src = <span class="s5">BPF</span>.ar(<span class="s5">WhiteNoise</span>.ar(amp), freq.poll, 0.01, amp * envgen);</p>
<p class="p5"><span class="Apple-tab-span">	</span><span class="Apple-tab-span">	</span><span class="s5">Out</span>.ar(0, <span class="s5">Pan2</span>.ar(src, <span class="s5">Rand</span>(-1.0, 1.0)));</p>
<p class="p5"><span class="Apple-tab-span">	</span><span class="Apple-tab-span">	</span>})</p>
<p class="p5"><span class="Apple-tab-span">	</span>);</p>
<p class="p5">)</p>
<p class="p3"><br></p>
<p class="p5">b = a[<span class="s6">\test2</span>].new.freq_(440).amp_(1.0).env_(<span class="s5">Env</span>([0, 1, 0], [0.5, 0.5], <span class="s6">\sin</span>, 1)).play;</p>
<p class="p5">c = a[<span class="s6">\test</span>].new.freq_(440).amp_(0.1).env_(<span class="s5">Env</span>([0, 1, 0], [0.5, 0.5], <span class="s6">\sin</span>, 1)).play;</p>
<p class="p3"><br></p>
<p class="p5">b.release;</p>
<p class="p6"><span class="s4">c.release(2); </span>// release in 2 seconds</p>
<p class="p3"><br></p>
<p class="p6"><span class="s4">z = </span><span class="s5">CtkControl</span><span class="s4">.play; </span>// allocates a control bus from the server, and tells Ctk it is for RT use</p>
<p class="p3"><br></p>
<p class="p6">// write values to z from a CtkNote</p>
<p class="p5">b = a[<span class="s6">\control</span>].new.outbus_(z.bus).rate_(2).low_(440).hi_(880).play;</p>
<p class="p3"><br></p>
<p class="p6">// use the instance of CtkControl as an argument</p>
<p class="p3"><br></p>
<p class="p5">c = a[<span class="s6">\test2</span>].new.freq_(z).amp_(3).env_(<span class="s5">Env</span>([0, 1, 0], [1, 1], <span class="s6">\sin</span>, 1)).play;</p>
<p class="p5">d = a[<span class="s6">\test</span>].new.freq_(z).amp_(0.2).env_(<span class="s5">Env</span>([0, 1, 0], [10, 0.1], <span class="s6">\sin</span>, 1)).play;</p>
<p class="p3"><br></p>
<p class="p6">// arguments that are changed while a CtkNote is running will change that parameter in real-time</p>
<p class="p5">c.amp = 0.5;</p>
<p class="p5">d.amp = 0.05;</p>
<p class="p3"><br></p>
<p class="p5">c.amp_(1);</p>
<p class="p5">d.amp_(0);</p>
<p class="p3"><br></p>
<p class="p6">// release the nodes with \gate args, free the other after they have finished</p>
<p class="p5">[d, c].do({<span class="s5">arg</span> me; me.release}); b.free(1);</p>
<p class="p3"><br></p>
<p class="p6">// play and schedule the release of the note</p>
<p class="p3"><br></p>
<p class="p5">b = a[<span class="s6">\test2</span>].new</p>
<p class="p5"><span class="Apple-tab-span">	</span>.freq_(440)</p>
<p class="p5"><span class="Apple-tab-span">	</span>.amp_(1.0)</p>
<p class="p5"><span class="Apple-tab-span">	</span>.env_(<span class="s5">Env</span>([0, 1, 0], [0.5, 0.5], <span class="s6">\sin</span>, 1))</p>
<p class="p5"><span class="Apple-tab-span">	</span>.play;</p>
<p class="p3"><br></p>
<p class="p5">b.release(4)</p>
<p class="p3"><br></p>
<p class="p1"><b>Examples that populate an instance of CtkScore. The CtkScore can then be rendered in NRT, played or saved as a file. See CtkScore for more examples.</b></p>
<p class="p2"><br></p>
<p class="p5">(</p>
<p class="p5"><span class="s5">var</span> scpn, score, grainfun, gliss;</p>
<p class="p3"><br></p>
<p class="p6">// reset allocators for this run of the score ... good for repeated renderings</p>
<p class="p3"><br></p>
<p class="p5">s.newAllocators;</p>
<p class="p3"><br></p>
<p class="p4"><span class="s4">scpn = </span>CtkProtoNotes<span class="s4">(</span></p>
<p class="p5"><span class="Apple-tab-span">	</span><span class="s5">SynthDef</span>(<span class="s6">\control</span>, {<span class="s5">arg</span> outbus, rate, low, hi;</p>
<p class="p5"><span class="Apple-tab-span">	</span><span class="Apple-tab-span">	</span><span class="s5">Out</span>.kr(outbus, <span class="s5">LFNoise2</span>.kr(rate).range(low, hi))</p>
<p class="p5"><span class="Apple-tab-span">	</span><span class="Apple-tab-span">	</span>}),</p>
<p class="p5"><span class="Apple-tab-span">	</span><span class="s5">SynthDef</span>(<span class="s6">\test</span>, {<span class="s5">arg</span> freq, amp, dur;</p>
<p class="p5"><span class="Apple-tab-span">	</span><span class="Apple-tab-span">	</span><span class="s5">var</span> env, envgen, src;</p>
<p class="p5"><span class="Apple-tab-span">	</span><span class="Apple-tab-span">	</span>env = <span class="s5">Env</span>([0, 1, 0], [0.5, 0.5], <span class="s6">\sin</span>);</p>
<p class="p5"><span class="Apple-tab-span">	</span><span class="Apple-tab-span">	</span>envgen = <span class="s5">EnvGen</span>.kr(env, timeScale: dur);</p>
<p class="p5"><span class="Apple-tab-span">	</span><span class="Apple-tab-span">	</span>src = <span class="s5">BPF</span>.ar(<span class="s5">WhiteNoise</span>.ar(amp), freq, 0.01, amp * envgen);</p>
<p class="p5"><span class="Apple-tab-span">	</span><span class="Apple-tab-span">	</span><span class="s5">Out</span>.ar(0, <span class="s5">Pan2</span>.ar(src, <span class="s5">Rand</span>(-1.0, 1.0)));</p>
<p class="p5"><span class="Apple-tab-span">	</span><span class="Apple-tab-span">	</span>})</p>
<p class="p5"><span class="Apple-tab-span">	</span>);</p>
<p class="p3"><span class="Apple-tab-span">	</span></p>
<p class="p5">score = <span class="s5">CtkScore</span>.new;</p>
<p class="p3"><br></p>
<p class="p6">/*</p>
<p class="p6">creates a granular gesture of duration. Each grain is 0.1 seconds long, new grain every 0.02 seconds</p>
<p class="p6">*/</p>
<p class="p3"><br></p>
<p class="p5">grainfun = {<span class="s5">arg</span> starttime, duration, ampenv, lowfreq, hifreq;</p>
<p class="p5"><span class="Apple-tab-span">	</span><span class="s5">var</span> now, note;</p>
<p class="p5"><span class="Apple-tab-span">	</span>now = 0;</p>
<p class="p5"><span class="Apple-tab-span">	</span>ampenv.times = ampenv.times.normalizeSum * duration; <span class="s7">// scale the Env's time to the gestures</span></p>
<p class="p5"><span class="Apple-tab-span">	</span>while({</p>
<p class="p6"><span class="s4"><span class="Apple-tab-span">	</span><span class="Apple-tab-span">	</span></span>// create a note... add it to the CtkScore</p>
<p class="p5"><span class="Apple-tab-span">	</span><span class="Apple-tab-span">	</span>note = scpn[<span class="s6">\test</span>].new(starttime + now, 0.1)</p>
<p class="p5"><span class="Apple-tab-span">	</span><span class="Apple-tab-span">	</span><span class="Apple-tab-span">	</span>.freq_(lowfreq.rrand(hifreq))</p>
<p class="p5"><span class="Apple-tab-span">	</span><span class="Apple-tab-span">	</span><span class="Apple-tab-span">	</span>.amp_(ampenv[now])</p>
<p class="p5"><span class="Apple-tab-span">	</span><span class="Apple-tab-span">	</span><span class="Apple-tab-span">	</span>.dur_(0.1);</p>
<p class="p6"><span class="s4"><span class="Apple-tab-span">	</span><span class="Apple-tab-span">	</span>score.add(note); </span>// tell CtkScore to add the note</p>
<p class="p5"><span class="Apple-tab-span">	</span><span class="Apple-tab-span">	</span>now = now + 0.02;</p>
<p class="p5"><span class="Apple-tab-span">	</span><span class="Apple-tab-span">	</span>now &lt; duration;</p>
<p class="p5"><span class="Apple-tab-span">	</span><span class="Apple-tab-span">	</span>});</p>
<p class="p5"><span class="Apple-tab-span">	</span>};</p>
<p class="p3"><span class="Apple-tab-span">	</span></p>
<p class="p5">gliss = {<span class="s5">arg</span> starttime, duration, rate, lowfreq, hifreq;</p>
<p class="p5"><span class="Apple-tab-span">	</span><span class="s5">var</span> cbus, control, note;</p>
<p class="p5"><span class="Apple-tab-span">	</span>cbus = <span class="s5">CtkControl</span>.new;</p>
<p class="p5"><span class="Apple-tab-span">	</span>control = scpn[<span class="s6">\control</span>].new(starttime, duration)</p>
<p class="p5"><span class="Apple-tab-span">	</span><span class="Apple-tab-span">	</span>.outbus_(cbus.bus)</p>
<p class="p5"><span class="Apple-tab-span">	</span><span class="Apple-tab-span">	</span>.rate_(rate)</p>
<p class="p5"><span class="Apple-tab-span">	</span><span class="Apple-tab-span">	</span>.low_(lowfreq)</p>
<p class="p5"><span class="Apple-tab-span">	</span><span class="Apple-tab-span">	</span>.hi_(hifreq)</p>
<p class="p6"><span class="s4"><span class="Apple-tab-span">	</span><span class="Apple-tab-span">	</span>.addTo(score); </span>// tell CtkNote to add to a CtkScore</p>
<p class="p5"><span class="Apple-tab-span">	</span>note = scpn[<span class="s6">\test</span>].new(starttime, duration, <span class="s6">\after</span>, control)</p>
<p class="p5"><span class="Apple-tab-span">	</span><span class="Apple-tab-span">	</span>.freq_(cbus)</p>
<p class="p5"><span class="Apple-tab-span">	</span><span class="Apple-tab-span">	</span>.amp_(2)</p>
<p class="p5"><span class="Apple-tab-span">	</span><span class="Apple-tab-span">	</span>.dur_(duration)</p>
<p class="p5"><span class="Apple-tab-span">	</span><span class="Apple-tab-span">	</span>.addTo(score);</p>
<p class="p5"><span class="Apple-tab-span">	</span>};</p>
<p class="p3"><br></p>
<p class="p5">grainfun.value(1, 10, <span class="s5">Env</span>([0, 1, 0], [0.5, 0.5], [3, -5]), 440, 880);</p>
<p class="p5">grainfun.value(4, 4, <span class="s5">Env</span>([0, 1, 0], [0.5, 0.5], [3, -5]), 4400, 8800);</p>
<p class="p5">grainfun.value(6, 12, <span class="s5">Env</span>([0, 1, 0], [0.5, 0.5], [3, -5]), 300, 400);</p>
<p class="p5">grainfun.value(3, 10, <span class="s5">Env</span>([0, 1, 0], [0.5, 0.5], [3, -5]), 200, 200);</p>
<p class="p5">grainfun.value(1.5, 20, <span class="s5">Env</span>([0, 1, 0], [0.5, 0.5], [3, -5]), 7000, 7100);</p>
<p class="p3"><br></p>
<p class="p5">5.do({<span class="s5">arg</span> i;</p>
<p class="p5"><span class="Apple-tab-span">	</span><span class="s5">var</span> j;</p>
<p class="p5"><span class="Apple-tab-span">	</span>j = i + 1;</p>
<p class="p5"><span class="Apple-tab-span">	</span>gliss.value(3 + (i + 4), 10.rrand(7), j.reciprocal, 440 * j, 880 * j);</p>
<p class="p5"><span class="Apple-tab-span">	</span>});</p>
<p class="p3"><span class="Apple-tab-span">	</span></p>
<p class="p6">// uncomment to play the CtkScore you have created</p>
<p class="p5">score.play(s);</p>
<p class="p3"><br></p>
<p class="p6">// uncomment to write the score to a soundfile</p>
<p class="p5">score.write(<span class="s8">"~/Desktop/test.aiff"</span>.standardizePath, score.endtime, 48000,</p>
<p class="p5"><span class="Apple-tab-span">	</span>options: <span class="s5">ServerOptions</span>.new.numOutputBusChannels_(2));</p>
<p class="p3"><br></p>
<p class="p6">// uncomment to save the CtkScore as a file</p>
<p class="p5">score.saveToFile(<span class="s8">"~/Desktop/test.sc"</span>.standardizePath);</p>
<p class="p5">)</p>
<p class="p3"><br></p>
<p class="p3"><br></p>
</body>
</html>
