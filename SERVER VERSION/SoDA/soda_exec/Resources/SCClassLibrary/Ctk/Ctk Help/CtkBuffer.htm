<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<title></title>
<meta name="Generator" content="Cocoa HTML Writer">
<meta name="CocoaVersion" content="949.46">
<style type="text/css">
p.p1 {margin: 0.0px 0.0px 0.0px 0.0px; font: 12.0px Helvetica}
p.p2 {margin: 0.0px 0.0px 0.0px 0.0px; font: 12.0px Helvetica; min-height: 14.0px}
p.p3 {margin: 0.0px 0.0px 0.0px 0.0px; font: 9.0px Monaco}
p.p4 {margin: 0.0px 0.0px 0.0px 0.0px; font: 9.0px Monaco; min-height: 12.0px}
p.p5 {margin: 0.0px 0.0px 0.0px 0.0px; font: 9.0px Monaco; color: #852921}
p.p6 {margin: 0.0px 0.0px 0.0px 0.0px; font: 9.0px Monaco; color: #0022b5}
p.p7 {margin: 0.0px 0.0px 0.0px 0.0px; font: 9.0px Monaco; color: #606060}
p.p8 {margin: 0.0px 0.0px 0.0px 0.0px; font: 9.0px Monaco; color: #95261a}
span.s1 {font: 18.0px Helvetica}
span.s2 {color: #0022b5}
span.s3 {color: #000000}
span.s4 {color: #606060}
span.s5 {color: #852921}
span.s6 {color: #4e6c17}
span.Apple-tab-span {white-space:pre}
</style>
</head>
<body>
<p class="p1"><span class="s1"><b>CtkBuffer<span class="Apple-tab-span">	</span></b></span><b><span class="Apple-tab-span">	</span><span class="Apple-tab-span">	</span><span class="Apple-tab-span">	</span>a note prototyping system</b></p>
<p class="p2"><br></p>
<p class="p1"><b>Part of the CompositionToolKit (Ctk) system. See Ctk help for more details</b></p>
<p class="p2"><br></p>
<p class="p1"><b>CtkBuffers can be used for both real-time and non-real-time (NRT) purposes, and can be used for soundfile playback, DiskIn allocation and to allocate empty buffer space.</b></p>
<p class="p2"><br></p>
<p class="p1"><b>Class Methods</b></p>
<p class="p2"><b><span class="Apple-converted-space"> </span></b></p>
<p class="p1"><b><span class="Apple-converted-space"> </span>*new(path, size, startFrame, numFrames, numChannels, bufnum, server, channels) </b>-</p>
<p class="p2"><span class="Apple-converted-space"> </span></p>
<p class="p1"><b><span class="Apple-converted-space"> </span>bufnum</b> - defaults to nil. If nil, a buffer id will be allocated for you.</p>
<p class="p1"><b><span class="Apple-converted-space"> </span>server</b> - defaults to Server.default.</p>
<p class="p2"><span class="Apple-converted-space"> </span></p>
<p class="p1"><span class="Apple-converted-space"> </span>Depending on the parameters passed to the new method, different kinds buffers will be allocated. There are also creation methods for the more commonly used buffer types. <b><span class="Apple-converted-space"> </span></b></p>
<p class="p2"><b><span class="Apple-converted-space"> </span></b></p>
<p class="p1"><b><span class="Apple-converted-space"> </span>if path is given</b></p>
<p class="p2"><span class="Apple-converted-space"> </span></p>
<p class="p1"><span class="Apple-converted-space"> </span>the soundfile will be completely loaded into a CtkBuffer for use in UGens such as PlayBuf or BufRd. Size and<span class="Apple-converted-space">   </span></p>
<p class="p1"><span class="Apple-converted-space"> </span>numChannels will be calculated for you with the SoundFile class. startFrame default to 0 and numFrames<span class="Apple-converted-space"> </span></p>
<p class="p1"><span class="Apple-converted-space"> </span>defaults to 0 (the entire file is read in). Channels can be a single or an Array of channels to read. Nil (the <span class="Apple-converted-space"> </span></p>
<p class="p1"><span class="Apple-converted-space"> </span>default) reads all channels.</p>
<p class="p2"><span class="Apple-converted-space"> </span></p>
<p class="p1"><b><span class="Apple-converted-space"> </span>if path and size is given</b></p>
<p class="p2"><b><span class="Apple-converted-space"> </span></b></p>
<p class="p1"><b><span class="Apple-converted-space"> </span></b>A CtkBuffer suitable for use with DiskIn is allocated. The buffer is left open and will be closed when the buffer<span class="Apple-converted-space"> </span></p>
<p class="p1"><span class="Apple-converted-space"> </span>is freed. Size should be a power of 2 (see the DiskIn file for). startFrame defaults to 0, numFrames defaults to</p>
<p class="p1"><span class="Apple-converted-space"> </span>the buffer size. Channels can be a single or an Array of channels to read. Nil (the default) reads all channels.</p>
<p class="p2"><span class="Apple-converted-space"> </span></p>
<p class="p1"><b><span class="Apple-converted-space"> </span>if only size is given</b></p>
<p class="p2"><br></p>
<p class="p1"><b><span class="Apple-converted-space"> </span></b>An empty buffer is allocated of size. numChannels defaults to 1.</p>
<p class="p2"><span class="Apple-converted-space"> </span><b><span class="Apple-converted-space"> </span></b></p>
<p class="p1"><b><span class="Apple-converted-space"> </span>*diskin(path, size, startFrame, server, channels) </b>- create a CtkBuffer suitable for DiskIn usage. size defaults<span class="Apple-converted-space"> </span></p>
<p class="p1"><span class="Apple-converted-space"> <span class="Apple-tab-span">	</span></span>to 32768. Channels can be nil (read all channels), a single number (read only 1 channel) or and Array</p>
<p class="p1"><span class="Apple-converted-space"> <span class="Apple-tab-span">	</span></span>of channels.</p>
<p class="p1"><b><span class="Apple-converted-space"> </span>*playbuf(path, startFrame, numFrames, server, channels) </b>- create a CtkBuffer suitable for PlayBuf usage.<span class="Apple-converted-space"> </span></p>
<p class="p1"><span class="Apple-converted-space"> <span class="Apple-tab-span">	</span></span>Channels can be nil (read all channels), a single number (read only 1 channel) or and Array of channels.</p>
<p class="p1"><b><span class="Apple-converted-space"> </span>*buffer(size, numChannels, server) </b>- create a CtkBuffer of empty size and numChannels.</p>
<p class="p1"><b><span class="Apple-converted-space"> </span>*env(size, env, wavetable, server) </b>- createa a CtkBuffer of size, filled with values from Env. 'wavetable' is a</p>
<p class="p1"><span class="Apple-converted-space"> <span class="Apple-tab-span">	</span></span>flag where 0 (the default) fills the CtkBuffer with a Signal, if 1 then a Wavetable is used.<span class="Apple-converted-space"> </span></p>
<p class="p2"><span class="Apple-converted-space"> </span></p>
<p class="p1"><b><span class="Apple-converted-space"> </span>load(time, sync)</b> - for real-time uses, load the file to the server in 'time' seconds. time defaults to 0.0. sync</p>
<p class="p1"><span class="Apple-converted-space"> <span class="Apple-tab-span">	</span></span>defaults to false. If true, a messages will post to let you know the buffer has been allocated. If other<span class="Apple-converted-space"> </span></p>
<p class="p1"><span class="Apple-converted-space"> <span class="Apple-tab-span">	</span></span>methods have been applied to a CtkBuffer (Wave fill commands or other fill or zero commands), these<span class="Apple-converted-space"> </span></p>
<p class="p1"><span class="Apple-converted-space"> <span class="Apple-tab-span">	</span></span>will be sent after the CtkBuffer has been loaded to the server and the message's time parameter</p>
<p class="p1"><span class="Apple-converted-space"> <span class="Apple-tab-span">	</span></span>is ignored. If you want to schedule something for the future, do it AFTER calling the load method on<span class="Apple-converted-space"> </span></p>
<p class="p1"><b><span class="Apple-converted-space"> </span>free(time)</b> - for real-time use, frees and, if necessary, closes the instance of CtkBuffer in 'time' seconds. time</p>
<p class="p1"><span class="Apple-converted-space"> <span class="Apple-tab-span">	</span></span>defaults to 0.0.</p>
<p class="p1"><b><span class="Apple-converted-space"> </span>set(time, startPos, values)</b> - set a value or an Array of values to a CtkBuffer. If using in real-time, the CtkBuffer</p>
<p class="p1"><span class="Apple-converted-space"> <span class="Apple-tab-span">	</span></span>must be loaded first.</p>
<p class="p1"><b><span class="Apple-converted-space"> </span>zero(time) </b>- zero the values in the buffer out.</p>
<p class="p1"><b><span class="Apple-converted-space"> </span>write(time, path, headerFormat, sampleFormat, numberOfFrames, startingFrame)</b> - write a buffer to a file</p>
<p class="p1"><span class="Apple-converted-space"> <span class="Apple-tab-span">	</span></span>at path. sampleFormat defaults to 'aiff', sampleFormat to 'int16', numberOfFrames to -1 and startingFrame</p>
<p class="p1"><span class="Apple-converted-space"> <span class="Apple-tab-span">	</span></span>to 0.</p>
<p class="p1"><b><span class="Apple-converted-space"> </span>openWrite(time, path, headerFormat, sampleFormat, numberOfFrames, startingFrame)</b> - write a buffer to<span class="Apple-converted-space"> </span></p>
<p class="p1"><span class="Apple-converted-space"> <span class="Apple-tab-span">	</span></span>file at path. sampleFormat defaults to 'aiff', sampleFormat to 'int16', numberOfFrames to -1 and<span class="Apple-converted-space"> </span></p>
<p class="p1"><span class="Apple-converted-space"> <span class="Apple-tab-span">	</span></span>startingFrame to 0. This file is left open for use by DiskOut, and will need to have the closeWrite method</p>
<p class="p1"><span class="Apple-converted-space"> <span class="Apple-tab-span">	</span></span>applied to the CtkBuffer.</p>
<p class="p1"><b><span class="Apple-converted-space"> </span>closeWrite(time)</b> - close and write the header for a file that had been created and let open with openWrite.</p>
<p class="p1"><b><span class="Apple-converted-space"> </span>fill(time, newValue, start, numSamples) </b>- fill a buffer with newValue starting at sample start for numSamples.</p>
<p class="p1"><span class="Apple-converted-space"> <span class="Apple-tab-span">	</span></span>From the Server-Command-Reference: " This is only meant for setting a few samples, not whole buffers or</p>
<p class="p1"><span class="Apple-converted-space"> <span class="Apple-tab-span">	</span></span>large sections"<span class="Apple-converted-space"> </span></p>
<p class="p1"><span class="Apple-converted-space"> </span><b>addTo(CtkScore)</b> - add this instance of CtkBuffer to a CtkScore for playing or NRT rendering.<span class="Apple-converted-space"> </span></p>
<p class="p1"><span class="Apple-converted-space"> <span class="Apple-tab-span">	</span></span>*All buffers are allocated at the beginning of the score. If a CtkScore is played, all CtkBuffers are loaded</p>
<p class="p1"><span class="Apple-converted-space"> <span class="Apple-tab-span">	</span></span>to the server before performance begins and may cause a delay. All CtkBuffers are freed when<span class="Apple-converted-space"> </span></p>
<p class="p1"><span class="Apple-converted-space"> <span class="Apple-tab-span">	</span></span>performance of a CtkScore is finished.</p>
<p class="p1"><b><span class="Apple-converted-space"> </span>numChannels </b>- return the number of channels in a CtkBuffer</p>
<p class="p1"><b><span class="Apple-converted-space"> </span>duration</b> - return the duration of the buffer, in seconds.</p>
<p class="p2"><span class="Apple-converted-space"> </span></p>
<p class="p1"><b><span class="Apple-converted-space"> </span>Wave File Commands</b></p>
<p class="p2"><b><span class="Apple-converted-space"> </span></b></p>
<p class="p1"><span class="Apple-converted-space"> </span><b>gen(time, cmd, normalize, wavetable, clear ... args) </b>- See the Wave Fill Commands for more in<span class="Apple-converted-space"> </span></p>
<p class="p1"><span class="Apple-converted-space"> <span class="Apple-tab-span">	</span></span>Server-Command-Reference for more details. This is the basic template used for the following standard<span class="Apple-converted-space"> </span></p>
<p class="p1"><span class="Apple-converted-space"> <span class="Apple-tab-span">	</span></span>b_gen commands. cmd is one of \sine1, \sine2, \sine3, or \cheby. 'normalize' defaults to 0 (don't normalize,<span class="Apple-converted-space"> </span></p>
<p class="p1"><span class="Apple-converted-space"> <span class="Apple-tab-span">	</span></span>1 to normalize), 'wavetable' specifies whether or not the buffer should use Wavetable format (defaults to</p>
<p class="p1"><span class="Apple-converted-space"> <span class="Apple-tab-span">	</span></span>0, set to 1 for Wavetables) and clear specifies if the buffer should be cleared before values are set or if</p>
<p class="p1"><span class="Apple-converted-space"> <span class="Apple-tab-span">	</span></span>new values should add to values previously in the buffer (defaults to 1 to clear values, 0 to add to old<span class="Apple-converted-space"> </span></p>
<p class="p1"><span class="Apple-converted-space"> <span class="Apple-tab-span">	</span></span>ones). The format of args is dependent on the wave command (see more below)</p>
<p class="p1"><b><span class="Apple-converted-space"> </span>sine1(time, normalize, wavetable, clear ... args) </b>- args are individual floats that are applied to harmonic<span class="Apple-converted-space"> </span></p>
<p class="p1"><span class="Apple-converted-space"> <span class="Apple-tab-span">	</span></span>partials of a sine wave and can vary in size.<span class="Apple-converted-space"> </span></p>
<p class="p1"><span class="Apple-converted-space"> <span class="Apple-tab-span">	</span></span>e.g. args = 1 - create a wave with only a fundamental frequency.</p>
<p class="p1"><span class="Apple-converted-space"> <span class="Apple-tab-span">	</span></span>e.g. args = 0.2, 1, 0.5, 0.2 - four partials, fundamental has an amplitude of 0.2, first partial's is 1, second</p>
<p class="p1"><span class="Apple-converted-space"> <span class="Apple-tab-span">	</span><span class="Apple-tab-span">	</span></span>partial's is 0.5, and the third partial's is 0.2.</p>
<p class="p1"><b><span class="Apple-converted-space"> </span>sine2(time, normalize, wavetable, clear ... args) </b>- args are pairs where the first float specifies the frequency</p>
<p class="p1"><span class="Apple-converted-space"> <span class="Apple-tab-span">	</span></span>of a partial (where 1 is the base frequency of the buffer) and the second value is its amplitude.</p>
<p class="p1"><span class="Apple-converted-space"> <span class="Apple-tab-span">	</span></span>e.g. args = 1, 0.5, 4, 0.2 - fundamental has a strength of 0.5, and the third partial has a strength of 0.2.</p>
<p class="p1"><b><span class="Apple-converted-space"> </span>sine3(time, normalize, wavetable, clear ... args)</b> - args are sets of three values (similar to above) that<span class="Apple-converted-space"> </span></p>
<p class="p1"><span class="Apple-converted-space"> <span class="Apple-tab-span">	</span></span>correspond to partial frequency, amplitude and phase.</p>
<p class="p1"><b><span class="Apple-converted-space"> </span>cheby(time, normalize, wavetable, clear ... args)</b> - args can be a series of floats that correspond to a series</p>
<p class="p1"><span class="Apple-converted-space"> <span class="Apple-tab-span">	</span></span>of chebyshev polynomials. The first float is for n = 1, where:</p>
<p class="p1"><span class="Apple-tab-span">	</span><span class="Apple-tab-span">	</span>cheby(n) = amplitude<span class="Apple-converted-space">  </span>* cos(n * acos(x))</p>
<p class="p1"><b><span class="Apple-converted-space"> </span>fillWithEnv(time, env, wavetable)</b> - converts an instance of Env into a Signal or Wavetable, and loads its<span class="Apple-converted-space"> </span></p>
<p class="p1"><span class="Apple-converted-space"> <span class="Apple-tab-span">	</span></span>values to the CtkBuffer. The wavetable parameter is a flag. If 0, the values are written as a Signal, if 1,</p>
<p class="p1"><span class="Apple-converted-space"> <span class="Apple-tab-span">	</span></span>they are written in Wavetable format.</p>
<p class="p2"><b><span class="Apple-converted-space"> </span></b></p>
<p class="p1"><b><span class="Apple-converted-space"> </span>Real-time uses</b></p>
<p class="p2"><b><span class="Apple-converted-space"> </span></b></p>
<p class="p3">s = <span class="s2">Server</span>.internal.boot;</p>
<p class="p3"><span class="s2">Server</span>.default = s;</p>
<p class="p4"><br></p>
<p class="p5">//for use with PlayBuf</p>
<p class="p5"><span class="s3">a = </span><span class="s2">CtkBuffer</span><span class="s3">(</span><span class="s4">"sounds/a11wlk01-44_1.aiff"</span><span class="s3">).load(sync: </span><span class="s2">true</span><span class="s3">); </span>// load and sync with the server</p>
<p class="p4"><br></p>
<p class="p3">b = {<span class="s2">PlayBuf</span>.ar(1, a)}.play(s);</p>
<p class="p4"><span class="Apple-converted-space"> </span></p>
<p class="p3">b.free;</p>
<p class="p4"><span class="Apple-converted-space"> </span></p>
<p class="p3">a.free;</p>
<p class="p4"><br></p>
<p class="p5">// for use with DiskIn</p>
<p class="p5"><span class="s3">a = </span><span class="s2">CtkBuffer</span><span class="s3">(</span><span class="s4">"sounds/a11wlk01-44_1.aiff"</span><span class="s3">, 32768).load(sync: </span><span class="s2">true</span><span class="s3">); </span>// load and sync with the server</p>
<p class="p4"><br></p>
<p class="p3">b = {<span class="s2">DiskIn</span>.ar(1, a)}.play(s);</p>
<p class="p4"><br></p>
<p class="p3">b.free;</p>
<p class="p4"><span class="Apple-converted-space"> </span></p>
<p class="p3">a.free;</p>
<p class="p4"><br></p>
<p class="p5">// for use with delays</p>
<p class="p5"><span class="s3">a = </span><span class="s2">CtkBuffer</span><span class="s3">(</span><span class="s4">"sounds/a11wlk01-44_1.aiff"</span><span class="s3">, 32768).load(sync: </span><span class="s2">true</span><span class="s3">); </span>// load and sync with the server</p>
<p class="p3">b = <span class="s2">CtkBuffer</span>(size: 32768).load(sync: <span class="s2">true</span>); <span class="s5">// load and sync with the server</span></p>
<p class="p4"><br></p>
<p class="p3">c = {<span class="s2">var</span> play, del;</p>
<p class="p3"><span class="Apple-tab-span">	</span>play = <span class="s2">DiskIn</span>.ar(1, a);</p>
<p class="p3"><span class="Apple-tab-span">	</span>del = <span class="s2">BufDelayN</span>.ar(b, play, 0.25);</p>
<p class="p3"><span class="Apple-tab-span">	</span>[play, del]</p>
<p class="p3"><span class="Apple-tab-span">	</span>}.play(s);</p>
<p class="p4"><br></p>
<p class="p3">c.free;</p>
<p class="p3">a.free;<span class="Apple-converted-space"> </span></p>
<p class="p3">b.free;</p>
<p class="p4"><br></p>
<p class="p5">// allocating and setting values</p>
<p class="p3">a = <span class="s2">CtkBuffer</span>(size: 2048);</p>
<p class="p3">a.load(sync: <span class="s2">true</span>);</p>
<p class="p3">a.set(0.0, 0, <span class="s2">Array</span>.fill(1024, {-1.0.rrand(1.0)}));</p>
<p class="p4"><br></p>
<p class="p3">b = {<span class="s2">PlayBuf</span>.ar(1, a, loop: 1)}.play(s);</p>
<p class="p2"><br></p>
<p class="p5">// change the values in the buffer</p>
<p class="p3">a.set(0.0, 1024, <span class="s2">Array</span>.fill(1024, {-1.0.rrand(1.0)}));</p>
<p class="p4"><br></p>
<p class="p5">// zero it out</p>
<p class="p3">a.zero;</p>
<p class="p4"><br></p>
<p class="p5">// refill them</p>
<p class="p3">a.set(0.0, 0, <span class="s2">Array</span>.fill(1024, {-1.0.rrand(1.0)}));</p>
<p class="p3">a.set(0.0, 1024, <span class="s2">Array</span>.fill(1024, {0.0.rrand(1.0)}));</p>
<p class="p4"><br></p>
<p class="p3">b.free;</p>
<p class="p4"><br></p>
<p class="p3">a.free;</p>
<p class="p4"><br></p>
<p class="p5">// with Osc, OscN and Shaper with the fill commands</p>
<p class="p4"><br></p>
<p class="p3">a = <span class="s2">CtkBuffer</span>(size: 32768).load(sync: <span class="s2">true</span>);</p>
<p class="p3">a.sine1(0.0, 1, 1, 1, 0.3);</p>
<p class="p4"><br></p>
<p class="p3">b = {<span class="s2">Osc</span>.ar(a, 440, mul: 0.5)}.play(s);</p>
<p class="p3">a.sine1(0.0, 1, 1, 1, 0.3, 0.2, 0.5);</p>
<p class="p3">a.sine3(0.0, 1, 1, 1, 1, 0.3, 0.0, 4, 0.2, 0.2, 9, 0.4, 0.5);</p>
<p class="p4"><br></p>
<p class="p3">b.free;</p>
<p class="p3">a.free;</p>
<p class="p2"><br></p>
<p class="p3">a = <span class="s2">CtkBuffer</span>.new(size: 32768).load(sync: <span class="s2">true</span>);</p>
<p class="p3">a.sine1(0.0, 1, 0, 1, 0.3);</p>
<p class="p4"><br></p>
<p class="p3">b = {<span class="s2">OscN</span>.ar(a, 440, mul: 0.5)}.play(s);</p>
<p class="p3">a.sine1(0.0, 1, 0, 1, 0.3, 0.2, 0.5);</p>
<p class="p3">a.sine3(0.0, 1, 0, 1, 1, 0.3, 0.0, 4, 0.2, 0.2, 9, 0.4, 0.5);</p>
<p class="p4"><br></p>
<p class="p3">b.free;</p>
<p class="p3">a.free;</p>
<p class="p4"><br></p>
<p class="p3">a = <span class="s2">CtkBuffer</span>(size: 32768);</p>
<p class="p3">a.cheby(0.0, 1, 1, 1, 0.3, 0.2, 0.5);</p>
<p class="p3">a.load(sync: <span class="s2">true</span>);</p>
<p class="p3">s.scope;</p>
<p class="p4"><br></p>
<p class="p3">b = {<span class="s2">Shaper</span>.ar(a, <span class="s2">SinOsc</span>.ar(440, 0, 0.5), mul: 0.5)}.play(s);</p>
<p class="p4"><br></p>
<p class="p3">a.cheby(0.0, 1, 1, 1, 1.0, 0.5, 0.2);</p>
<p class="p3">a.cheby(0.0, 1, 1, 1, 0.1, 0.5, 1.0);</p>
<p class="p3">a.cheby(0.0, 1, 1, 1, 1.0);</p>
<p class="p4"><br></p>
<p class="p3">b.free;</p>
<p class="p3">a.free;</p>
<p class="p4"><br></p>
<p class="p5">// Test with DiskOut</p>
<p class="p4"><br></p>
<p class="p3">a = <span class="s2">CtkBuffer</span>(size: 32768).load;</p>
<p class="p5">// open a file for writing with DiskOut</p>
<p class="p3">a.openWrite(0.0, <span class="s4">"~/Desktop/test.aiff"</span>.standardizePath, <span class="s6">'aiff'</span>, <span class="s6">'int16'</span>, -1);</p>
<p class="p4"><br></p>
<p class="p3">b = {<span class="s2">DiskOut</span>.ar(a, <span class="s2">SinOsc</span>.ar(440, 0, 0.2))}.play(s);</p>
<p class="p4"><br></p>
<p class="p5">// let it run for a moment... then kill</p>
<p class="p3">b.free;</p>
<p class="p5">//close the file</p>
<p class="p3">a.closeWrite.free;</p>
<p class="p5">// test to make sure it worked</p>
<p class="p3">a = <span class="s2">CtkBuffer</span>(<span class="s4">"~/Desktop/test.aiff"</span>.standardizePath).load;</p>
<p class="p4"><br></p>
<p class="p3">b = {<span class="s2">PlayBuf</span>.ar(1, a)}.play;</p>
<p class="p4"><br></p>
<p class="p3">b.free; a.free;</p>
<p class="p4"><br></p>
<p class="p5">// the fillWithEnv method.</p>
<p class="p3">a = <span class="s2">CtkBuffer</span>.new(size: 1024).fillWithEnv(env: <span class="s2">Env</span>([0, 1, 0], [0.5, 0.5], <span class="s6">\sin</span>)).load;</p>
<p class="p3">b = {<span class="s2">SinOsc</span>.ar(440, 0, 0.2) * <span class="s2">BufRd</span>.ar(1, a, <span class="s2">Phasor</span>.ar(0.0, 0.01, 0, 1024).poll)}.play(s)</p>
<p class="p4"><br></p>
<p class="p3">b.free;</p>
<p class="p3">a.free;</p>
<p class="p2"><br></p>
<p class="p2"><br></p>
<p class="p1"><b><span class="Apple-converted-space"> </span>Uses with CtkScore</b></p>
<p class="p2"><br></p>
<p class="p3">(</p>
<p class="p3"><span class="s2">var</span> play, buf, score, playfun;</p>
<p class="p4"><br></p>
<p class="p3">score = <span class="s2">CtkScore</span>.new;</p>
<p class="p4"><br></p>
<p class="p6"><span class="s3">play = </span>CtkNoteObject<span class="s3">(</span></p>
<p class="p3"><span class="Apple-tab-span">	</span><span class="s2">SynthDef</span>(<span class="s6">\play</span>, {<span class="s2">arg</span> buffer, rate = 1, dur, start;</p>
<p class="p3"><span class="Apple-tab-span">	</span><span class="Apple-tab-span">	</span><span class="s2">OffsetOut</span>.ar(0,<span class="Apple-converted-space"> </span></p>
<p class="p3"><span class="Apple-tab-span">	</span><span class="Apple-tab-span">	</span><span class="Apple-tab-span">	</span><span class="s2">Pan2</span>.ar(</p>
<p class="p3"><span class="Apple-tab-span">	</span><span class="Apple-tab-span">	</span><span class="Apple-tab-span">	</span><span class="Apple-tab-span">	</span><span class="s2">PlayBuf</span>.ar(1, buffer, <span class="s2">BufRateScale</span>.kr(buffer) * rate,<span class="Apple-converted-space"> </span></p>
<p class="p3"><span class="Apple-tab-span">	</span><span class="Apple-tab-span">	</span><span class="Apple-tab-span">	</span><span class="Apple-tab-span">	</span><span class="Apple-tab-span">	</span>startPos: start * <span class="s2">BufSampleRate</span>.kr(buffer)) *</p>
<p class="p3"><span class="Apple-tab-span">	</span><span class="Apple-tab-span">	</span><span class="Apple-tab-span">	</span><span class="Apple-tab-span">	</span><span class="s2">EnvGen</span>.ar(</p>
<p class="p3"><span class="Apple-tab-span">	</span><span class="Apple-tab-span">	</span><span class="Apple-tab-span">	</span><span class="Apple-tab-span">	</span><span class="Apple-tab-span">	</span><span class="s2">Env</span>([0, 1, 0], [0.5, 0.5], <span class="s6">\sin</span>),</p>
<p class="p3"><span class="Apple-tab-span">	</span><span class="Apple-tab-span">	</span><span class="Apple-tab-span">	</span><span class="Apple-tab-span">	</span><span class="Apple-tab-span">	</span>timeScale: dur)))</p>
<p class="p3"><span class="Apple-tab-span">	</span><span class="Apple-tab-span">	</span>})</p>
<p class="p3"><span class="Apple-tab-span">	</span>);</p>
<p class="p4"><span class="Apple-tab-span">	</span></p>
<p class="p7"><span class="s3">buf = </span><span class="s2">CtkBuffer</span><span class="s3">(</span>"sounds/a11wlk01-44_1.aiff"<span class="s3">).addTo(score);</span></p>
<p class="p4"><br></p>
<p class="p5">//CtkBuffer(size: 1024).set(0.0, 0, Array.fill(1024, {-1.0.rrand(1.0)})).zero(1).addTo(score);</p>
<p class="p4"><br></p>
<p class="p3">playfun = {<span class="s2">arg</span> starttime, gestdur, rateenv;</p>
<p class="p3"><span class="Apple-tab-span">	</span><span class="s2">var</span> note, now, ratio, rate;</p>
<p class="p3"><span class="Apple-tab-span">	</span>now = 0;</p>
<p class="p3"><span class="Apple-tab-span">	</span>while({</p>
<p class="p3"><span class="Apple-tab-span">	</span><span class="Apple-tab-span">	</span>ratio = now / gestdur;</p>
<p class="p3"><span class="Apple-tab-span">	</span><span class="Apple-tab-span">	</span>rate = rateenv[ratio];</p>
<p class="p3"><span class="Apple-tab-span">	</span><span class="Apple-tab-span">	</span>play.new(now + starttime, 0.5)</p>
<p class="p5"><span class="s3"><span class="Apple-tab-span">	</span><span class="Apple-tab-span">	</span><span class="Apple-tab-span">	</span>.buffer_(buf) </span>// the arg will parse the CtkBuffer and grab its bufnum</p>
<p class="p3"><span class="Apple-tab-span">	</span><span class="Apple-tab-span">	</span><span class="Apple-tab-span">	</span>.rate_(<span class="s2">CtkControl</span>.env(<span class="s2">Env</span>([rate, 1], [1])))</p>
<p class="p3"><span class="Apple-tab-span">	</span><span class="Apple-tab-span">	</span><span class="Apple-tab-span">	</span>.dur_(0.5)</p>
<p class="p3"><span class="Apple-tab-span">	</span><span class="Apple-tab-span">	</span><span class="Apple-tab-span">	</span>.start_((buf.duration - (0.5 * rate)).rand)</p>
<p class="p3"><span class="Apple-tab-span">	</span><span class="Apple-tab-span">	</span><span class="Apple-tab-span">	</span>.addTo(score);</p>
<p class="p3"><span class="Apple-tab-span">	</span><span class="Apple-tab-span">	</span>now = now + 0.2;</p>
<p class="p3"><span class="Apple-tab-span">	</span><span class="Apple-tab-span">	</span>now &lt; gestdur;</p>
<p class="p3"><span class="Apple-tab-span">	</span><span class="Apple-tab-span">	</span>});</p>
<p class="p3"><span class="Apple-tab-span">	</span>};</p>
<p class="p4"><span class="Apple-tab-span">	</span></p>
<p class="p3">playfun.value(0, 20, <span class="s2">Env</span>([0.5, 2.0, 1.0], [0.2, 0.8], [3, -5]));</p>
<p class="p4"><br></p>
<p class="p5">// uncomment to play the score</p>
<p class="p8">//[score.notes, score.groups, score.controls, score.messages].postln;</p>
<p class="p3">score.play</p>
<p class="p5">// uncomment to save the score</p>
<p class="p5">//score.saveToFile("~/Desktop/test.sc".standardizePath);</p>
<p class="p5">// uncomment to write the score to a soundfile</p>
<p class="p5">//score.write("~/Desktop/test.aiff".standardizePath,<span class="Apple-converted-space"> </span></p>
<p class="p5">//<span class="Apple-tab-span">	</span>options: ServerOptions.new.numOutputBusChannels_(2));</p>
<p class="p3">)</p>
</body>
</html>
